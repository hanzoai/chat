# Hanzo AI Chat Stack Makefile
# One-command deployment and management

.PHONY: help up down restart logs build push deploy clean test status backup restore

# Color definitions
YELLOW := \033[1;33m
GREEN := \033[1;32m
RED := \033[1;31m
BLUE := \033[1;34m
NC := \033[0m # No Color

# Configuration
DOCKER_REGISTRY ?= ghcr.io/hanzoai
ROUTER_IMAGE := $(DOCKER_REGISTRY)/router
CHAT_IMAGE := $(DOCKER_REGISTRY)/chat
VERSION ?= latest
COMPOSE_FILE := docker-compose.hanzo.yml

# Default target
help:
	@echo "$(BLUE)Hanzo AI Chat Stack Management$(NC)"
	@echo ""
	@echo "$(YELLOW)Quick Start:$(NC)"
	@echo "  $(GREEN)make deploy$(NC)     - Build and start the entire Hanzo stack"
	@echo ""
	@echo "$(YELLOW)Development:$(NC)"
	@echo "  $(GREEN)make up$(NC)         - Start all services"
	@echo "  $(GREEN)make down$(NC)       - Stop all services"
	@echo "  $(GREEN)make restart$(NC)    - Restart all services"
	@echo "  $(GREEN)make logs$(NC)       - View logs (all services)"
	@echo "  $(GREEN)make logs-chat$(NC)  - View chat service logs"
	@echo "  $(GREEN)make logs-router$(NC) - View Hanzo Router logs"
	@echo "  $(GREEN)make status$(NC)     - Check service health"
	@echo ""
	@echo "$(YELLOW)Building:$(NC)"
	@echo "  $(GREEN)make build$(NC)      - Build Docker images"
	@echo "  $(GREEN)make push$(NC)       - Push images to registry"
	@echo "  $(GREEN)make clean$(NC)      - Clean up volumes and images"
	@echo ""
	@echo "$(YELLOW)Testing:$(NC)"
	@echo "  $(GREEN)make test$(NC)       - Run all tests"
	@echo "  $(GREEN)make test-api$(NC)   - Test API endpoints"
	@echo ""
	@echo "$(YELLOW)Data Management:$(NC)"
	@echo "  $(GREEN)make backup$(NC)     - Backup all data"
	@echo "  $(GREEN)make restore$(NC)    - Restore from backup"

# Quick deploy - builds and starts everything
deploy: check-env build
	@echo "$(BLUE)üöÄ Deploying Hanzo AI Chat Stack...$(NC)"
	@docker compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Deployment complete!$(NC)"
	@echo ""
	@echo "$(YELLOW)Access points:$(NC)"
	@echo "  Chat UI:        http://localhost:3081"
	@echo "  Hanzo Router:   http://localhost:4000"
	@echo "  Router Admin:   http://localhost:4000/ui"
	@echo ""
	@echo "$(YELLOW)Default credentials:$(NC)"
	@echo "  Master Key:     sk-hanzo-master-key"
	@echo ""
	@$(MAKE) wait-healthy

# Check required environment variables
check-env:
	@echo "$(BLUE)üîç Checking environment...$(NC)"
	@if [ -z "$$OPENAI_API_KEY" ] && [ -z "$$ANTHROPIC_API_KEY" ] && [ -z "$$TOGETHER_API_KEY" ]; then \
		echo "$(RED)‚ùå Error: At least one LLM API key must be set$(NC)"; \
		echo "$(YELLOW)Please set one of: OPENAI_API_KEY, ANTHROPIC_API_KEY, or TOGETHER_API_KEY$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)üìù Creating .env file from template...$(NC)"; \
		cp .env.example .env; \
	fi
	@echo "$(GREEN)‚úÖ Environment check passed$(NC)"

# Build Docker images
build:
	@echo "$(BLUE)üî® Building Docker images...$(NC)"
	@docker compose -f $(COMPOSE_FILE) build
	@echo "$(GREEN)‚úÖ Build complete$(NC)"

# Push images to registry
push:
	@echo "$(BLUE)üì§ Pushing images to registry...$(NC)"
	@docker tag hanzo/router:latest $(ROUTER_IMAGE):$(VERSION)
	@docker tag hanzo/chat:latest $(CHAT_IMAGE):$(VERSION)
	@docker push $(ROUTER_IMAGE):$(VERSION)
	@docker push $(CHAT_IMAGE):$(VERSION)
	@echo "$(GREEN)‚úÖ Images pushed successfully$(NC)"

# Start services
up:
	@echo "$(BLUE)‚ñ∂Ô∏è  Starting services...$(NC)"
	@docker compose -f $(COMPOSE_FILE) up -d
	@$(MAKE) wait-healthy

# Stop services
down:
	@echo "$(BLUE)‚èπÔ∏è  Stopping services...$(NC)"
	@docker compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ Services stopped$(NC)"

# Restart services
restart:
	@echo "$(BLUE)üîÑ Restarting services...$(NC)"
	@docker compose -f $(COMPOSE_FILE) restart
	@$(MAKE) wait-healthy

# View logs
logs:
	@docker compose -f $(COMPOSE_FILE) logs -f

logs-chat:
	@docker compose -f $(COMPOSE_FILE) logs -f chat

logs-router:
	@docker compose -f $(COMPOSE_FILE) logs -f router

# Check service health
status:
	@echo "$(BLUE)üìä Service Status:$(NC)"
	@echo ""
	@docker compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(BLUE)üè• Health Checks:$(NC)"
	@for service in postgres redis mongodb meilisearch router chat nginx; do \
		if docker compose -f $(COMPOSE_FILE) exec -T $$service echo "OK" >/dev/null 2>&1; then \
			echo "  $$service: $(GREEN)‚úÖ Healthy$(NC)"; \
		else \
			echo "  $$service: $(RED)‚ùå Unhealthy$(NC)"; \
		fi; \
	done

# Wait for services to be healthy
wait-healthy:
	@echo "$(BLUE)‚è≥ Waiting for services to be healthy...$(NC)"
	@for i in 1 2 3 4 5 6 7 8 9 10; do \
		if docker compose -f $(COMPOSE_FILE) exec -T router curl -f http://localhost:4000/health >/dev/null 2>&1 && \
		   docker compose -f $(COMPOSE_FILE) exec -T chat curl -f http://localhost:3080/health >/dev/null 2>&1; then \
			echo "$(GREEN)‚úÖ All services are healthy!$(NC)"; \
			break; \
		fi; \
		echo "  Waiting... ($$i/10)"; \
		sleep 5; \
	done

# Run tests
test: test-api test-chat

test-api:
	@echo "$(BLUE)üß™ Testing API endpoints...$(NC)"
	@curl -s -X GET http://localhost:4000/health | grep -q "healthy" && \
		echo "$(GREEN)‚úÖ Hanzo Router: OK$(NC)" || \
		echo "$(RED)‚ùå Hanzo Router: Failed$(NC)"
	@curl -s -X GET http://localhost:3081/health | grep -q "OK" && \
		echo "$(GREEN)‚úÖ Chat UI: OK$(NC)" || \
		echo "$(RED)‚ùå Chat UI: Failed$(NC)"

test-chat:
	@echo "$(BLUE)üß™ Testing chat functionality...$(NC)"
	@curl -s -X POST http://localhost:4000/v1/chat/completions \
		-H "Content-Type: application/json" \
		-H "Authorization: Bearer sk-hanzo-master-key" \
		-d '{"model": "hanzo-zen-1", "messages": [{"role": "user", "content": "Hello"}]}' | \
		grep -q "content" && \
		echo "$(GREEN)‚úÖ Chat completion: OK$(NC)" || \
		echo "$(RED)‚ùå Chat completion: Failed$(NC)"

# Clean up
clean:
	@echo "$(BLUE)üßπ Cleaning up...$(NC)"
	@docker compose -f $(COMPOSE_FILE) down -v
	@docker rmi hanzo/router:latest hanzo/chat:latest || true
	@echo "$(GREEN)‚úÖ Cleanup complete$(NC)"

# Backup data
backup:
	@echo "$(BLUE)üíæ Backing up data...$(NC)"
	@mkdir -p backups
	@BACKUP_NAME="hanzo-backup-$$(date +%Y%m%d-%H%M%S)"; \
	docker compose -f $(COMPOSE_FILE) exec -T postgres pg_dump -U hanzo hanzo_chat > backups/$$BACKUP_NAME-postgres.sql; \
	docker compose -f $(COMPOSE_FILE) exec -T mongodb mongodump --archive > backups/$$BACKUP_NAME-mongodb.archive; \
	echo "$(GREEN)‚úÖ Backup saved to backups/$$BACKUP_NAME-*$(NC)"

# Restore from backup
restore:
	@if [ -z "$(BACKUP)" ]; then \
		echo "$(RED)‚ùå Please specify BACKUP=<backup-name>$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üì• Restoring from backup...$(NC)"
	@docker compose -f $(COMPOSE_FILE) exec -T postgres psql -U hanzo hanzo_chat < backups/$(BACKUP)-postgres.sql
	@docker compose -f $(COMPOSE_FILE) exec -T mongodb mongorestore --archive < backups/$(BACKUP)-mongodb.archive
	@echo "$(GREEN)‚úÖ Restore complete$(NC)"

# Initialize demo user
init-demo:
	@echo "$(BLUE)üë§ Initializing demo user...$(NC)"
	@./init-demo-user.sh

# Development helpers
dev-setup:
	@echo "$(BLUE)üõ†Ô∏è  Setting up development environment...$(NC)"
	@poetry install --with dev,proxy-dev --extras proxy
	@cd client && npm install
	@echo "$(GREEN)‚úÖ Development setup complete$(NC)"

dev-frontend:
	@echo "$(BLUE)üé® Starting frontend development server...$(NC)"
	@cd client && npm run dev

dev-backend:
	@echo "$(BLUE)‚öôÔ∏è  Starting Hanzo Router development server...$(NC)"
	@poetry run litellm --config hanzo-config.yaml --port 4000

# Production deployment
prod-deploy:
	@echo "$(BLUE)üöÄ Deploying to production...$(NC)"
	@$(MAKE) build VERSION=$(shell git rev-parse --short HEAD)
	@$(MAKE) push VERSION=$(shell git rev-parse --short HEAD)
	@echo "$(GREEN)‚úÖ Production deployment complete$(NC)"
	@echo "$(YELLOW)Images tagged with version: $(shell git rev-parse --short HEAD)$(NC)"
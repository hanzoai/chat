{"version":3,"file":"index.es.js","sources":["../../src/types/assistants.ts","../../src/feedback.ts","../../src/schemas.ts","../../src/models.ts","../../src/file-config.ts","../../src/types/files.ts","../../src/types/agents.ts","../../src/utils.ts","../../src/mcp.ts","../../src/config.ts","../../src/api-endpoints.ts","../../src/request.ts","../../src/headers-helpers.ts","../../src/data-service.ts","../../src/keys.ts","../../src/react-query/react-query-service.ts"],"sourcesContent":["import type { OpenAPIV3 } from 'openapi-types';\nimport type { AssistantsEndpoint, AgentProvider } from 'src/schemas';\nimport type { ContentTypes } from './runs';\nimport type { Agents } from './agents';\nimport type { TFile } from './files';\nimport { ArtifactModes } from 'src/artifacts';\n\nexport type Schema = OpenAPIV3.SchemaObject & { description?: string };\nexport type Reference = OpenAPIV3.ReferenceObject & { description?: string };\n\nexport type Metadata = {\n  avatar?: string;\n  author?: string;\n} & {\n  [key: string]: unknown;\n};\n\nexport enum Tools {\n  execute_code = 'execute_code',\n  code_interpreter = 'code_interpreter',\n  file_search = 'file_search',\n  web_search = 'web_search',\n  retrieval = 'retrieval',\n  function = 'function',\n  memory = 'memory',\n}\n\nexport enum EToolResources {\n  code_interpreter = 'code_interpreter',\n  execute_code = 'execute_code',\n  file_search = 'file_search',\n  image_edit = 'image_edit',\n  ocr = 'ocr',\n}\n\nexport type Tool = {\n  [type: string]: Tools;\n};\n\nexport type FunctionTool = {\n  type: Tools;\n  function?: {\n    description: string;\n    name: string;\n    parameters: Record<string, unknown>;\n    strict?: boolean;\n    additionalProperties?: boolean; // must be false if strict is true https://platform.openai.com/docs/guides/structured-outputs/some-type-specific-keywords-are-not-yet-supported\n  };\n};\n\n/**\n * A set of resources that are used by the assistant's tools. The resources are\n * specific to the type of tool. For example, the `code_interpreter` tool requires\n * a list of file IDs, while the `file_search` tool requires a list of vector store\n * IDs.\n */\nexport interface ToolResources {\n  code_interpreter?: CodeInterpreterResource;\n  file_search?: FileSearchResource;\n}\nexport interface CodeInterpreterResource {\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n   * available to the `code_interpreter`` tool. There can be a maximum of 20 files\n   * associated with the tool.\n   */\n  file_ids?: Array<string>;\n}\n\nexport interface FileSearchResource {\n  /**\n   * The ID of the\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n   * attached to this assistant. There can be a maximum of 1 vector store attached to\n   * the assistant.\n   */\n  vector_store_ids?: Array<string>;\n}\n\n/* Assistant types */\n\nexport type Assistant = {\n  id: string;\n  created_at: number;\n  description: string | null;\n  file_ids?: string[];\n  instructions: string | null;\n  conversation_starters?: string[];\n  metadata: Metadata | null;\n  model: string;\n  name: string | null;\n  object: string;\n  tools?: FunctionTool[];\n  tool_resources?: ToolResources;\n};\n\nexport type TAssistantsMap = Record<AssistantsEndpoint, Record<string, Assistant>>;\n\nexport type AssistantCreateParams = {\n  model: string;\n  description?: string | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  conversation_starters?: string[];\n  metadata?: Metadata | null;\n  name?: string | null;\n  tools?: Array<FunctionTool | string>;\n  endpoint: AssistantsEndpoint;\n  version: number | string;\n  append_current_datetime?: boolean;\n};\n\nexport type AssistantUpdateParams = {\n  model?: string;\n  description?: string | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  conversation_starters?: string[] | null;\n  metadata?: Metadata | null;\n  name?: string | null;\n  tools?: Array<FunctionTool | string>;\n  tool_resources?: ToolResources;\n  endpoint: AssistantsEndpoint;\n  append_current_datetime?: boolean;\n};\n\nexport type AssistantListParams = {\n  limit?: number;\n  before?: string | null;\n  after?: string | null;\n  order?: 'asc' | 'desc';\n  endpoint: AssistantsEndpoint;\n};\n\nexport type AssistantListResponse = {\n  object: string;\n  data: Assistant[];\n  first_id: string;\n  last_id: string;\n  has_more: boolean;\n};\n\nexport type File = {\n  file_id: string;\n  id?: string;\n  temp_file_id?: string;\n  bytes: number;\n  created_at: number;\n  filename: string;\n  object: string;\n  purpose: 'fine-tune' | 'fine-tune-results' | 'assistants' | 'assistants_output';\n};\n\n/* Agent types */\n\nexport type AgentParameterValue = number | string | null;\n\nexport type AgentModelParameters = {\n  model?: string;\n  temperature: AgentParameterValue;\n  maxContextTokens: AgentParameterValue;\n  max_context_tokens: AgentParameterValue;\n  max_output_tokens: AgentParameterValue;\n  top_p: AgentParameterValue;\n  frequency_penalty: AgentParameterValue;\n  presence_penalty: AgentParameterValue;\n};\n\nexport interface AgentBaseResource {\n  /**\n   * A list of file IDs made available to the tool.\n   */\n  file_ids?: Array<string>;\n  /**\n   * A list of files already fetched.\n   */\n  files?: Array<TFile>;\n}\n\nexport interface AgentToolResources {\n  [EToolResources.image_edit]?: AgentBaseResource;\n  [EToolResources.execute_code]?: ExecuteCodeResource;\n  [EToolResources.file_search]?: AgentFileResource;\n  [EToolResources.ocr]?: AgentBaseResource;\n}\n/**\n * A resource for the execute_code tool.\n * Contains file IDs made available to the tool (max 20 files) and already fetched files.\n */\nexport type ExecuteCodeResource = AgentBaseResource;\n\nexport interface AgentFileResource extends AgentBaseResource {\n  /**\n   * The ID of the vector store attached to this agent. There\n   * can be a maximum of 1 vector store attached to the agent.\n   */\n  vector_store_ids?: Array<string>;\n}\n\nexport type Agent = {\n  id: string;\n  name: string | null;\n  author?: string | null;\n  /** The original custom endpoint name, lowercased */\n  endpoint?: string | null;\n  authorName?: string | null;\n  description: string | null;\n  created_at: number;\n  avatar: AgentAvatar | null;\n  instructions: string | null;\n  additional_instructions?: string | null;\n  tools?: string[];\n  projectIds?: string[];\n  tool_kwargs?: Record<string, unknown>;\n  metadata?: Record<string, unknown>;\n  provider: AgentProvider;\n  model: string | null;\n  model_parameters: AgentModelParameters;\n  conversation_starters?: string[];\n  isCollaborative?: boolean;\n  tool_resources?: AgentToolResources;\n  agent_ids?: string[];\n  end_after_tools?: boolean;\n  hide_sequential_outputs?: boolean;\n  artifacts?: ArtifactModes;\n  recursion_limit?: number;\n  version?: number;\n};\n\nexport type TAgentsMap = Record<string, Agent | undefined>;\n\nexport type AgentCreateParams = {\n  name?: string | null;\n  description?: string | null;\n  avatar?: AgentAvatar | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  tools?: Array<FunctionTool | string>;\n  provider: AgentProvider;\n  model: string | null;\n  model_parameters: AgentModelParameters;\n} & Pick<\n  Agent,\n  'agent_ids' | 'end_after_tools' | 'hide_sequential_outputs' | 'artifacts' | 'recursion_limit'\n>;\n\nexport type AgentUpdateParams = {\n  name?: string | null;\n  description?: string | null;\n  avatar?: AgentAvatar | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  tools?: Array<FunctionTool | string>;\n  tool_resources?: ToolResources;\n  provider?: AgentProvider;\n  model?: string | null;\n  model_parameters?: AgentModelParameters;\n  projectIds?: string[];\n  removeProjectIds?: string[];\n  isCollaborative?: boolean;\n} & Pick<\n  Agent,\n  'agent_ids' | 'end_after_tools' | 'hide_sequential_outputs' | 'artifacts' | 'recursion_limit'\n>;\n\nexport type AgentListParams = {\n  limit?: number;\n  before?: string | null;\n  after?: string | null;\n  order?: 'asc' | 'desc';\n  provider?: AgentProvider;\n};\n\nexport type AgentListResponse = {\n  object: string;\n  data: Agent[];\n  first_id: string;\n  last_id: string;\n  has_more: boolean;\n};\n\nexport type AgentFile = {\n  file_id: string;\n  id?: string;\n  temp_file_id?: string;\n  bytes: number;\n  created_at: number;\n  filename: string;\n  object: string;\n  purpose: 'fine-tune' | 'fine-tune-results' | 'agents' | 'agents_output';\n};\n\n/**\n * Details of the Code Interpreter tool call the run step was involved in.\n * Includes the tool call ID, the code interpreter definition, and the type of tool call.\n */\nexport type CodeToolCall = {\n  id: string; // The ID of the tool call.\n  code_interpreter: {\n    input: string; // The input to the Code Interpreter tool call.\n    outputs: Array<Record<string, unknown>>; // The outputs from the Code Interpreter tool call.\n  };\n  type: 'code_interpreter'; // The type of tool call, always 'code_interpreter'.\n};\n\n/**\n * Details of a Function tool call the run step was involved in.\n * Includes the tool call ID, the function definition, and the type of tool call.\n */\nexport type FunctionToolCall = {\n  id: string; // The ID of the tool call object.\n  function: {\n    arguments: string; // The arguments passed to the function.\n    name: string; // The name of the function.\n    output: string | null; // The output of the function, null if not submitted.\n  };\n  type: 'function'; // The type of tool call, always 'function'.\n};\n\n/**\n * Details of a Retrieval tool call the run step was involved in.\n * Includes the tool call ID and the type of tool call.\n */\nexport type RetrievalToolCall = {\n  id: string; // The ID of the tool call object.\n  retrieval: unknown; // An empty object for now.\n  type: 'retrieval'; // The type of tool call, always 'retrieval'.\n};\n\n/**\n * Details of a Retrieval tool call the run step was involved in.\n * Includes the tool call ID and the type of tool call.\n */\nexport type FileSearchToolCall = {\n  id: string; // The ID of the tool call object.\n  file_search: unknown; // An empty object for now.\n  type: 'file_search'; // The type of tool call, always 'retrieval'.\n};\n\n/**\n * Details of the tool calls involved in a run step.\n * Can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.\n */\nexport type ToolCallsStepDetails = {\n  tool_calls: Array<CodeToolCall | RetrievalToolCall | FileSearchToolCall | FunctionToolCall>; // An array of tool calls the run step was involved in.\n  type: 'tool_calls'; // Always 'tool_calls'.\n};\n\nexport type ImageFile = TFile & {\n  /**\n   * The [File](https://platform.openai.com/docs/api-reference/files) ID of the image\n   * in the message content.\n   */\n  file_id: string;\n  filename: string;\n  filepath: string;\n  height: number;\n  width: number;\n  /**\n   * Prompt used to generate the image if applicable.\n   */\n  prompt?: string;\n  /**\n   * Additional metadata used to generate or about the image/tool_call.\n   */\n  metadata?: Record<string, unknown>;\n};\n\n// FileCitation.ts\nexport type FileCitation = {\n  end_index: number;\n  file_citation: FileCitationDetails;\n  start_index: number;\n  text: string;\n  type: 'file_citation';\n};\n\nexport type FileCitationDetails = {\n  file_id: string;\n  quote: string;\n};\n\nexport type FilePath = {\n  end_index: number;\n  file_path: FilePathDetails;\n  start_index: number;\n  text: string;\n  type: 'file_path';\n};\n\nexport type FilePathDetails = {\n  file_id: string;\n};\n\nexport type Text = {\n  annotations?: Array<FileCitation | FilePath>;\n  value: string;\n};\n\nexport enum AnnotationTypes {\n  FILE_CITATION = 'file_citation',\n  FILE_PATH = 'file_path',\n}\n\nexport enum StepStatus {\n  IN_PROGRESS = 'in_progress',\n  CANCELLED = 'cancelled',\n  FAILED = 'failed',\n  COMPLETED = 'completed',\n  EXPIRED = 'expired',\n}\n\nexport enum MessageContentTypes {\n  TEXT = 'text',\n  IMAGE_FILE = 'image_file',\n}\n\n//enum for RunStatus\n// The status of the run: queued, in_progress, requires_action, cancelling, cancelled, failed, completed, or expired.\nexport enum RunStatus {\n  QUEUED = 'queued',\n  IN_PROGRESS = 'in_progress',\n  REQUIRES_ACTION = 'requires_action',\n  CANCELLING = 'cancelling',\n  CANCELLED = 'cancelled',\n  FAILED = 'failed',\n  COMPLETED = 'completed',\n  EXPIRED = 'expired',\n}\n\nexport type PartMetadata = {\n  progress?: number;\n  asset_pointer?: string;\n  status?: string;\n  action?: boolean;\n  auth?: string;\n  expires_at?: number;\n};\n\nexport type ContentPart = (\n  | CodeToolCall\n  | RetrievalToolCall\n  | FileSearchToolCall\n  | FunctionToolCall\n  | Agents.AgentToolCall\n  | ImageFile\n  | Text\n) &\n  PartMetadata;\n\nexport type TMessageContentParts =\n  | { type: ContentTypes.ERROR; text?: string | (Text & PartMetadata); error?: string }\n  | { type: ContentTypes.THINK; think: string | (Text & PartMetadata) }\n  | { type: ContentTypes.TEXT; text: string | (Text & PartMetadata); tool_call_ids?: string[] }\n  | {\n      type: ContentTypes.TOOL_CALL;\n      tool_call: (\n        | CodeToolCall\n        | RetrievalToolCall\n        | FileSearchToolCall\n        | FunctionToolCall\n        | Agents.AgentToolCall\n      ) &\n        PartMetadata;\n    }\n  | { type: ContentTypes.IMAGE_FILE; image_file: ImageFile & PartMetadata }\n  | Agents.AgentUpdate\n  | Agents.MessageContentImageUrl;\n\nexport type StreamContentData = TMessageContentParts & {\n  /** The index of the current content part */\n  index: number;\n  /** The current text content was already served but edited to replace elements therein */\n  edited?: boolean;\n};\n\nexport type TContentData = StreamContentData & {\n  messageId: string;\n  conversationId: string;\n  userMessageId: string;\n  thread_id: string;\n  stream?: boolean;\n};\n\nexport const actionDelimiter = '_action_';\nexport const actionDomainSeparator = '---';\nexport const hostImageIdSuffix = '_host_copy';\nexport const hostImageNamePrefix = 'host_copy_';\n\nexport type AssistantAvatar = {\n  filepath: string;\n  source: string;\n};\n\nexport type AssistantDocument = {\n  user: string;\n  assistant_id: string;\n  conversation_starters?: string[];\n  avatar?: AssistantAvatar;\n  access_level?: number;\n  file_ids?: string[];\n  actions?: string[];\n  createdAt?: Date;\n  updatedAt?: Date;\n  append_current_datetime?: boolean;\n};\n\n/* Agent types */\n\nexport type AgentAvatar = {\n  filepath: string;\n  source: string;\n};\n\nexport enum FilePurpose {\n  Vision = 'vision',\n  FineTune = 'fine-tune',\n  FineTuneResults = 'fine-tune-results',\n  Assistants = 'assistants',\n  AssistantsOutput = 'assistants_output',\n}\n\nexport const defaultOrderQuery: {\n  order: 'desc';\n  limit: 100;\n} = {\n  order: 'desc',\n  limit: 100,\n};\n\nexport enum AssistantStreamEvents {\n  ThreadCreated = 'thread.created',\n  ThreadRunCreated = 'thread.run.created',\n  ThreadRunQueued = 'thread.run.queued',\n  ThreadRunInProgress = 'thread.run.in_progress',\n  ThreadRunRequiresAction = 'thread.run.requires_action',\n  ThreadRunCompleted = 'thread.run.completed',\n  ThreadRunFailed = 'thread.run.failed',\n  ThreadRunCancelling = 'thread.run.cancelling',\n  ThreadRunCancelled = 'thread.run.cancelled',\n  ThreadRunExpired = 'thread.run.expired',\n  ThreadRunStepCreated = 'thread.run.step.created',\n  ThreadRunStepInProgress = 'thread.run.step.in_progress',\n  ThreadRunStepCompleted = 'thread.run.step.completed',\n  ThreadRunStepFailed = 'thread.run.step.failed',\n  ThreadRunStepCancelled = 'thread.run.step.cancelled',\n  ThreadRunStepExpired = 'thread.run.step.expired',\n  ThreadRunStepDelta = 'thread.run.step.delta',\n  ThreadMessageCreated = 'thread.message.created',\n  ThreadMessageInProgress = 'thread.message.in_progress',\n  ThreadMessageCompleted = 'thread.message.completed',\n  ThreadMessageIncomplete = 'thread.message.incomplete',\n  ThreadMessageDelta = 'thread.message.delta',\n  ErrorEvent = 'error',\n}\n","import { z } from 'zod';\n\nexport type TFeedbackRating = 'thumbsUp' | 'thumbsDown';\nexport const FEEDBACK_RATINGS = ['thumbsUp', 'thumbsDown'] as const;\n\nexport const FEEDBACK_REASON_KEYS = [\n  // Down\n  'not_matched',\n  'inaccurate',\n  'bad_style',\n  'missing_image',\n  'unjustified_refusal',\n  'not_helpful',\n  'other',\n  // Up\n  'accurate_reliable',\n  'creative_solution',\n  'clear_well_written',\n  'attention_to_detail',\n] as const;\n\nexport type TFeedbackTagKey = (typeof FEEDBACK_REASON_KEYS)[number];\n\nexport interface TFeedbackTag {\n  key: TFeedbackTagKey;\n  label: string;\n  direction: TFeedbackRating;\n  icon: string;\n}\n\n// --- Tag Registry ---\nexport const FEEDBACK_TAGS: TFeedbackTag[] = [\n  // Thumbs Down\n  {\n    key: 'not_matched',\n    label: 'com_ui_feedback_tag_not_matched',\n    direction: 'thumbsDown',\n    icon: 'AlertCircle',\n  },\n  {\n    key: 'inaccurate',\n    label: 'com_ui_feedback_tag_inaccurate',\n    direction: 'thumbsDown',\n    icon: 'AlertCircle',\n  },\n  {\n    key: 'bad_style',\n    label: 'com_ui_feedback_tag_bad_style',\n    direction: 'thumbsDown',\n    icon: 'PenTool',\n  },\n  {\n    key: 'missing_image',\n    label: 'com_ui_feedback_tag_missing_image',\n    direction: 'thumbsDown',\n    icon: 'ImageOff',\n  },\n  {\n    key: 'unjustified_refusal',\n    label: 'com_ui_feedback_tag_unjustified_refusal',\n    direction: 'thumbsDown',\n    icon: 'Ban',\n  },\n  {\n    key: 'not_helpful',\n    label: 'com_ui_feedback_tag_not_helpful',\n    direction: 'thumbsDown',\n    icon: 'ThumbsDown',\n  },\n  {\n    key: 'other',\n    label: 'com_ui_feedback_tag_other',\n    direction: 'thumbsDown',\n    icon: 'HelpCircle',\n  },\n  // Thumbs Up\n  {\n    key: 'accurate_reliable',\n    label: 'com_ui_feedback_tag_accurate_reliable',\n    direction: 'thumbsUp',\n    icon: 'CheckCircle',\n  },\n  {\n    key: 'creative_solution',\n    label: 'com_ui_feedback_tag_creative_solution',\n    direction: 'thumbsUp',\n    icon: 'Lightbulb',\n  },\n  {\n    key: 'clear_well_written',\n    label: 'com_ui_feedback_tag_clear_well_written',\n    direction: 'thumbsUp',\n    icon: 'PenTool',\n  },\n  {\n    key: 'attention_to_detail',\n    label: 'com_ui_feedback_tag_attention_to_detail',\n    direction: 'thumbsUp',\n    icon: 'Search',\n  },\n];\n\nexport function getTagsForRating(rating: TFeedbackRating): TFeedbackTag[] {\n  return FEEDBACK_TAGS.filter((tag) => tag.direction === rating);\n}\n\nexport const feedbackTagKeySchema = z.enum(FEEDBACK_REASON_KEYS);\nexport const feedbackRatingSchema = z.enum(FEEDBACK_RATINGS);\n\nexport const feedbackSchema = z.object({\n  rating: feedbackRatingSchema,\n  tag: feedbackTagKeySchema,\n  text: z.string().max(1024).optional(),\n});\n\nexport type TMinimalFeedback = z.infer<typeof feedbackSchema>;\n\nexport type TFeedback = {\n  rating: TFeedbackRating;\n  tag: TFeedbackTag | undefined;\n  text?: string;\n};\n\nexport function toMinimalFeedback(feedback: TFeedback | undefined): TMinimalFeedback | undefined {\n  if (!feedback?.rating || !feedback?.tag || !feedback.tag.key) {\n    return undefined;\n  }\n\n  return {\n    rating: feedback.rating,\n    tag: feedback.tag.key,\n    text: feedback.text,\n  };\n}\n\nexport function getTagByKey(key: TFeedbackTagKey | undefined): TFeedbackTag | undefined {\n  if (!key) {\n    return undefined;\n  }\n  return FEEDBACK_TAGS.find((tag) => tag.key === key);\n}\n","import { z } from 'zod';\nimport { Tools } from './types/assistants';\nimport type { TMessageContentParts, FunctionTool, FunctionToolCall } from './types/assistants';\nimport { TFeedback, feedbackSchema } from './feedback';\nimport type { SearchResultData } from './types/web';\nimport type { TFile } from './types/files';\n\nexport const isUUID = z.string().uuid();\n\nexport enum AuthType {\n  OVERRIDE_AUTH = 'override_auth',\n  USER_PROVIDED = 'user_provided',\n  SYSTEM_DEFINED = 'system_defined',\n}\n\nexport const authTypeSchema = z.nativeEnum(AuthType);\n\nexport enum EModelEndpoint {\n  azureOpenAI = 'azureOpenAI',\n  openAI = 'openAI',\n  google = 'google',\n  anthropic = 'anthropic',\n  assistants = 'assistants',\n  azureAssistants = 'azureAssistants',\n  agents = 'agents',\n  custom = 'custom',\n  bedrock = 'bedrock',\n  /** @deprecated */\n  chatGPTBrowser = 'chatGPTBrowser',\n  /** @deprecated */\n  gptPlugins = 'gptPlugins',\n}\n\nexport const paramEndpoints = new Set<EModelEndpoint | string>([\n  EModelEndpoint.agents,\n  EModelEndpoint.openAI,\n  EModelEndpoint.bedrock,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.custom,\n  EModelEndpoint.google,\n]);\n\nexport enum BedrockProviders {\n  AI21 = 'ai21',\n  Amazon = 'amazon',\n  Anthropic = 'anthropic',\n  Cohere = 'cohere',\n  Meta = 'meta',\n  MistralAI = 'mistral',\n  StabilityAI = 'stability',\n  DeepSeek = 'deepseek',\n}\n\nexport const getModelKey = (endpoint: EModelEndpoint | string, model: string) => {\n  if (endpoint === EModelEndpoint.bedrock) {\n    const parts = model.split('.');\n    const provider = [parts[0], parts[1]].find((part) =>\n      Object.values(BedrockProviders).includes(part as BedrockProviders),\n    );\n    return (provider ?? parts[0]) as BedrockProviders;\n  }\n  return model;\n};\n\nexport const getSettingsKeys = (endpoint: EModelEndpoint | string, model: string) => {\n  const endpointKey = endpoint;\n  const modelKey = getModelKey(endpointKey, model);\n  const combinedKey = `${endpointKey}-${modelKey}`;\n  return [combinedKey, endpointKey];\n};\n\nexport type AssistantsEndpoint = EModelEndpoint.assistants | EModelEndpoint.azureAssistants;\n\nexport const isAssistantsEndpoint = (_endpoint?: AssistantsEndpoint | null | string): boolean => {\n  const endpoint = _endpoint ?? '';\n  if (!endpoint) {\n    return false;\n  }\n  return endpoint.toLowerCase().endsWith(EModelEndpoint.assistants);\n};\n\nexport type AgentProvider = Exclude<keyof typeof EModelEndpoint, EModelEndpoint.agents> | string;\n\nexport const isAgentsEndpoint = (_endpoint?: EModelEndpoint.agents | null | string): boolean => {\n  const endpoint = _endpoint ?? '';\n  if (!endpoint) {\n    return false;\n  }\n  return endpoint === EModelEndpoint.agents;\n};\n\nexport const isParamEndpoint = (\n  endpoint: EModelEndpoint | string,\n  endpointType?: EModelEndpoint | string,\n): boolean => {\n  if (paramEndpoints.has(endpoint)) {\n    return true;\n  }\n\n  if (endpointType != null) {\n    return paramEndpoints.has(endpointType);\n  }\n\n  return false;\n};\n\nexport enum ImageDetail {\n  low = 'low',\n  auto = 'auto',\n  high = 'high',\n}\n\nexport enum ReasoningEffort {\n  low = 'low',\n  medium = 'medium',\n  high = 'high',\n}\n\nexport const imageDetailNumeric = {\n  [ImageDetail.low]: 0,\n  [ImageDetail.auto]: 1,\n  [ImageDetail.high]: 2,\n};\n\nexport const imageDetailValue = {\n  0: ImageDetail.low,\n  1: ImageDetail.auto,\n  2: ImageDetail.high,\n};\n\nexport const eImageDetailSchema = z.nativeEnum(ImageDetail);\nexport const eReasoningEffortSchema = z.nativeEnum(ReasoningEffort);\n\nexport const defaultAssistantFormValues = {\n  assistant: '',\n  id: '',\n  name: '',\n  description: '',\n  instructions: '',\n  conversation_starters: [],\n  model: '',\n  functions: [],\n  code_interpreter: false,\n  image_vision: false,\n  retrieval: false,\n  append_current_datetime: false,\n};\n\nexport const defaultAgentFormValues = {\n  agent: {},\n  id: '',\n  name: '',\n  description: '',\n  instructions: '',\n  model: '',\n  model_parameters: {},\n  tools: [],\n  provider: {},\n  projectIds: [],\n  artifacts: '',\n  isCollaborative: false,\n  recursion_limit: undefined,\n  [Tools.execute_code]: false,\n  [Tools.file_search]: false,\n  [Tools.web_search]: false,\n};\n\nexport const ImageVisionTool: FunctionTool = {\n  type: Tools.function,\n  [Tools.function]: {\n    name: 'image_vision',\n    description: 'Get detailed text descriptions for all current image attachments.',\n    parameters: {\n      type: 'object',\n      properties: {},\n      required: [],\n    },\n  },\n};\n\nexport const isImageVisionTool = (tool: FunctionTool | FunctionToolCall) =>\n  tool.type === 'function' && tool.function?.name === ImageVisionTool.function?.name;\n\nexport const openAISettings = {\n  model: {\n    default: 'gpt-4o-mini' as const,\n  },\n  temperature: {\n    min: 0 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  top_p: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  presence_penalty: {\n    min: 0 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 0 as const,\n  },\n  frequency_penalty: {\n    min: 0 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 0 as const,\n  },\n  resendFiles: {\n    default: true as const,\n  },\n  maxContextTokens: {\n    default: undefined,\n  },\n  max_tokens: {\n    default: undefined,\n  },\n  imageDetail: {\n    default: ImageDetail.auto as const,\n    min: 0 as const,\n    max: 2 as const,\n    step: 1 as const,\n  },\n};\n\nexport const googleSettings = {\n  model: {\n    default: 'gemini-1.5-flash-latest' as const,\n  },\n  maxOutputTokens: {\n    min: 1 as const,\n    max: 64000 as const,\n    step: 1 as const,\n    default: 8192 as const,\n  },\n  temperature: {\n    min: 0 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  topP: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 0.95 as const,\n  },\n  topK: {\n    min: 1 as const,\n    max: 40 as const,\n    step: 1 as const,\n    default: 40 as const,\n  },\n  thinking: {\n    default: true as const,\n  },\n  thinkingBudget: {\n    min: -1 as const,\n    max: 32768 as const,\n    step: 1 as const,\n    /** `-1` = Dynamic Thinking, meaning the model will adjust\n     * the budget based on the complexity of the request.\n     */\n    default: -1 as const,\n  },\n};\n\nconst ANTHROPIC_MAX_OUTPUT = 128000 as const;\nconst DEFAULT_MAX_OUTPUT = 8192 as const;\nconst LEGACY_ANTHROPIC_MAX_OUTPUT = 4096 as const;\nexport const anthropicSettings = {\n  model: {\n    default: 'claude-3-5-sonnet-latest' as const,\n  },\n  temperature: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  promptCache: {\n    default: true as const,\n  },\n  thinking: {\n    default: true as const,\n  },\n  thinkingBudget: {\n    min: 1024 as const,\n    step: 100 as const,\n    max: 200000 as const,\n    default: 2000 as const,\n  },\n  maxOutputTokens: {\n    min: 1 as const,\n    max: ANTHROPIC_MAX_OUTPUT,\n    step: 1 as const,\n    default: DEFAULT_MAX_OUTPUT,\n    reset: (modelName: string) => {\n      if (/claude-3[-.]5-sonnet/.test(modelName) || /claude-3[-.]7/.test(modelName)) {\n        return DEFAULT_MAX_OUTPUT;\n      }\n\n      return 4096;\n    },\n    set: (value: number, modelName: string) => {\n      if (\n        !(/claude-3[-.]5-sonnet/.test(modelName) || /claude-3[-.]7/.test(modelName)) &&\n        value > LEGACY_ANTHROPIC_MAX_OUTPUT\n      ) {\n        return LEGACY_ANTHROPIC_MAX_OUTPUT;\n      }\n\n      return value;\n    },\n  },\n  topP: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 0.7 as const,\n  },\n  topK: {\n    min: 1 as const,\n    max: 40 as const,\n    step: 1 as const,\n    default: 5 as const,\n  },\n  resendFiles: {\n    default: true as const,\n  },\n  maxContextTokens: {\n    default: undefined,\n  },\n  legacy: {\n    maxOutputTokens: {\n      min: 1 as const,\n      max: LEGACY_ANTHROPIC_MAX_OUTPUT,\n      step: 1 as const,\n      default: LEGACY_ANTHROPIC_MAX_OUTPUT,\n    },\n  },\n};\n\nexport const agentsSettings = {\n  model: {\n    default: 'gpt-3.5-turbo-test' as const,\n  },\n  temperature: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  top_p: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  presence_penalty: {\n    min: 0 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 0 as const,\n  },\n  frequency_penalty: {\n    min: 0 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 0 as const,\n  },\n  resendFiles: {\n    default: true as const,\n  },\n  maxContextTokens: {\n    default: undefined,\n  },\n  max_tokens: {\n    default: undefined,\n  },\n  imageDetail: {\n    default: ImageDetail.auto as const,\n  },\n};\n\nexport const endpointSettings = {\n  [EModelEndpoint.openAI]: openAISettings,\n  [EModelEndpoint.google]: googleSettings,\n  [EModelEndpoint.anthropic]: anthropicSettings,\n  [EModelEndpoint.agents]: agentsSettings,\n  [EModelEndpoint.bedrock]: agentsSettings,\n};\n\nconst google = endpointSettings[EModelEndpoint.google];\n\nexport const eModelEndpointSchema = z.nativeEnum(EModelEndpoint);\n\nexport const extendedModelEndpointSchema = z.union([eModelEndpointSchema, z.string()]);\n\nexport const tPluginAuthConfigSchema = z.object({\n  authField: z.string(),\n  label: z.string(),\n  description: z.string(),\n});\n\nexport type TPluginAuthConfig = z.infer<typeof tPluginAuthConfigSchema>;\n\nexport const tPluginSchema = z.object({\n  name: z.string(),\n  pluginKey: z.string(),\n  description: z.string().optional(),\n  icon: z.string().optional(),\n  authConfig: z.array(tPluginAuthConfigSchema).optional(),\n  authenticated: z.boolean().optional(),\n  chatMenu: z.boolean().optional(),\n  isButton: z.boolean().optional(),\n  toolkit: z.boolean().optional(),\n});\n\nexport type TPlugin = z.infer<typeof tPluginSchema>;\n\nexport type TInput = {\n  inputStr: string;\n};\n\nexport type TResPlugin = {\n  plugin: string;\n  input: string;\n  thought: string;\n  loading?: boolean;\n  outputs?: string;\n  latest?: string;\n  inputs?: TInput[];\n};\n\nexport const tExampleSchema = z.object({\n  input: z.object({\n    content: z.string(),\n  }),\n  output: z.object({\n    content: z.string(),\n  }),\n});\n\nexport type TExample = z.infer<typeof tExampleSchema>;\n\nexport enum EAgent {\n  functions = 'functions',\n  classic = 'classic',\n}\n\nexport const agentOptionSettings = {\n  model: {\n    default: 'gpt-4o-mini',\n  },\n  temperature: {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: 0,\n  },\n  agent: {\n    default: EAgent.functions,\n    options: [EAgent.functions, EAgent.classic],\n  },\n  skipCompletion: {\n    default: true,\n  },\n};\n\nexport const eAgentOptionsSchema = z.nativeEnum(EAgent);\n\nexport const tAgentOptionsSchema = z.object({\n  agent: z.string().default(EAgent.functions),\n  skipCompletion: z.boolean().default(agentOptionSettings.skipCompletion.default),\n  model: z.string(),\n  temperature: z.number().default(agentOptionSettings.temperature.default),\n});\n\nexport const tMessageSchema = z.object({\n  messageId: z.string(),\n  endpoint: z.string().optional(),\n  clientId: z.string().nullable().optional(),\n  conversationId: z.string().nullable(),\n  parentMessageId: z.string().nullable(),\n  responseMessageId: z.string().nullable().optional(),\n  overrideParentMessageId: z.string().nullable().optional(),\n  bg: z.string().nullable().optional(),\n  model: z.string().nullable().optional(),\n  title: z.string().nullable().or(z.literal('New Chat')).default('New Chat'),\n  sender: z.string().optional(),\n  text: z.string(),\n  generation: z.string().nullable().optional(),\n  isCreatedByUser: z.boolean(),\n  error: z.boolean().optional(),\n  clientTimestamp: z.string().optional(),\n  createdAt: z\n    .string()\n    .optional()\n    .default(() => new Date().toISOString()),\n  updatedAt: z\n    .string()\n    .optional()\n    .default(() => new Date().toISOString()),\n  current: z.boolean().optional(),\n  unfinished: z.boolean().optional(),\n  searchResult: z.boolean().optional(),\n  finish_reason: z.string().optional(),\n  /* assistant */\n  thread_id: z.string().optional(),\n  /* frontend components */\n  iconURL: z.string().nullable().optional(),\n  feedback: feedbackSchema.optional(),\n});\n\nexport type MemoryArtifact = {\n  key: string;\n  value?: string;\n  tokenCount?: number;\n  type: 'update' | 'delete';\n};\n\nexport type TAttachmentMetadata = {\n  type?: Tools;\n  messageId: string;\n  toolCallId: string;\n  [Tools.web_search]?: SearchResultData;\n  [Tools.memory]?: MemoryArtifact;\n};\n\nexport type TAttachment =\n  | (TFile & TAttachmentMetadata)\n  | (Pick<TFile, 'filename' | 'filepath' | 'conversationId'> & {\n      expiresAt: number;\n    } & TAttachmentMetadata);\n\nexport type TMessage = z.input<typeof tMessageSchema> & {\n  children?: TMessage[];\n  plugin?: TResPlugin | null;\n  plugins?: TResPlugin[];\n  content?: TMessageContentParts[];\n  files?: Partial<TFile>[];\n  depth?: number;\n  siblingIndex?: number;\n  attachments?: TAttachment[];\n  clientTimestamp?: string;\n  feedback?: TFeedback;\n};\n\nexport const coerceNumber = z.union([z.number(), z.string()]).transform((val) => {\n  if (typeof val === 'string') {\n    return val.trim() === '' ? undefined : parseFloat(val);\n  }\n  return val;\n});\n\ntype DocumentTypeValue =\n  | null\n  | boolean\n  | number\n  | string\n  | DocumentTypeValue[]\n  | { [key: string]: DocumentTypeValue };\n\nconst DocumentType: z.ZodType<DocumentTypeValue> = z.lazy(() =>\n  z.union([\n    z.null(),\n    z.boolean(),\n    z.number(),\n    z.string(),\n    z.array(z.lazy(() => DocumentType)),\n    z.record(z.lazy(() => DocumentType)),\n  ]),\n);\n\nexport const tConversationSchema = z.object({\n  conversationId: z.string().nullable(),\n  endpoint: eModelEndpointSchema.nullable(),\n  endpointType: eModelEndpointSchema.nullable().optional(),\n  isArchived: z.boolean().optional(),\n  title: z.string().nullable().or(z.literal('New Chat')).default('New Chat'),\n  user: z.string().optional(),\n  messages: z.array(z.string()).optional(),\n  tools: z.union([z.array(tPluginSchema), z.array(z.string())]).optional(),\n  modelLabel: z.string().nullable().optional(),\n  userLabel: z.string().optional(),\n  model: z.string().nullable().optional(),\n  promptPrefix: z.string().nullable().optional(),\n  temperature: z.number().optional(),\n  topP: z.number().optional(),\n  topK: z.number().optional(),\n  top_p: z.number().optional(),\n  frequency_penalty: z.number().optional(),\n  presence_penalty: z.number().optional(),\n  parentMessageId: z.string().optional(),\n  maxOutputTokens: coerceNumber.optional(),\n  maxContextTokens: coerceNumber.optional(),\n  max_tokens: coerceNumber.optional(),\n  /* Anthropic */\n  promptCache: z.boolean().optional(),\n  system: z.string().optional(),\n  thinking: z.boolean().optional(),\n  thinkingBudget: coerceNumber.optional(),\n  /* artifacts */\n  artifacts: z.string().optional(),\n  /* google */\n  context: z.string().nullable().optional(),\n  examples: z.array(tExampleSchema).optional(),\n  /* DB */\n  tags: z.array(z.string()).optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  /* Files */\n  resendFiles: z.boolean().optional(),\n  file_ids: z.array(z.string()).optional(),\n  /* vision */\n  imageDetail: eImageDetailSchema.optional(),\n  /* OpenAI: o1 only */\n  reasoning_effort: eReasoningEffortSchema.optional(),\n  /* assistant */\n  assistant_id: z.string().optional(),\n  /* agents */\n  agent_id: z.string().optional(),\n  /* AWS Bedrock */\n  region: z.string().optional(),\n  maxTokens: coerceNumber.optional(),\n  additionalModelRequestFields: DocumentType.optional(),\n  /* assistants */\n  instructions: z.string().optional(),\n  additional_instructions: z.string().optional(),\n  append_current_datetime: z.boolean().optional(),\n  /** Used to overwrite active conversation settings when saving a Preset */\n  presetOverride: z.record(z.unknown()).optional(),\n  stop: z.array(z.string()).optional(),\n  /* frontend components */\n  greeting: z.string().optional(),\n  spec: z.string().nullable().optional(),\n  iconURL: z.string().nullable().optional(),\n  /* temporary chat */\n  expiredAt: z.string().nullable().optional(),\n  /** @deprecated */\n  resendImages: z.boolean().optional(),\n  /** @deprecated */\n  agentOptions: tAgentOptionsSchema.nullable().optional(),\n  /** @deprecated Prefer `modelLabel` over `chatGptLabel` */\n  chatGptLabel: z.string().nullable().optional(),\n});\n\nexport const tPresetSchema = tConversationSchema\n  .omit({\n    conversationId: true,\n    createdAt: true,\n    updatedAt: true,\n    title: true,\n  })\n  .merge(\n    z.object({\n      conversationId: z.string().nullable().optional(),\n      presetId: z.string().nullable().optional(),\n      title: z.string().nullable().optional(),\n      defaultPreset: z.boolean().optional(),\n      order: z.number().optional(),\n      endpoint: extendedModelEndpointSchema.nullable(),\n    }),\n  );\n\nexport const tConvoUpdateSchema = tConversationSchema.merge(\n  z.object({\n    endpoint: extendedModelEndpointSchema.nullable(),\n    createdAt: z.string().optional(),\n    updatedAt: z.string().optional(),\n  }),\n);\n\nexport const tQueryParamsSchema = tConversationSchema\n  .pick({\n    // chat settings\n    /** The model spec to be used */\n    spec: true,\n    /** The AI context window, overrides the system-defined window as determined by `model` value */\n    maxContextTokens: true,\n    /**\n     * Whether or not to re-submit files from previous messages on subsequent messages\n     * */\n    resendFiles: true,\n    /**\n     * @endpoints openAI, custom, azureOpenAI\n     *\n     * System parameter that only affects the above endpoints.\n     * Image detail for re-sizing according to OpenAI spec, defaults to `auto`\n     * */\n    imageDetail: true,\n    /**\n     * AKA Custom Instructions, dynamically added to chat history as a system message;\n     * for `bedrock` endpoint, this is used as the `system` model param if the provider uses it;\n     * for `assistants` endpoint, this is used as the `additional_instructions` model param:\n     * https://platform.openai.com/docs/api-reference/runs/createRun#runs-createrun-additional_instructions\n     * ; otherwise, a message with `system` role is added to the chat history\n     */\n    promptPrefix: true,\n    // Model parameters\n    /** @endpoints openAI, custom, azureOpenAI, google, anthropic, assistants, azureAssistants, bedrock */\n    model: true,\n    /** @endpoints openAI, custom, azureOpenAI, google, anthropic, bedrock */\n    temperature: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    presence_penalty: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    frequency_penalty: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    stop: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    top_p: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    max_tokens: true,\n    /** @endpoints google, anthropic, bedrock */\n    topP: true,\n    /** @endpoints google, anthropic */\n    topK: true,\n    /** @endpoints google, anthropic */\n    maxOutputTokens: true,\n    /** @endpoints anthropic */\n    promptCache: true,\n    thinking: true,\n    thinkingBudget: true,\n    /** @endpoints bedrock */\n    region: true,\n    /** @endpoints bedrock */\n    maxTokens: true,\n    /** @endpoints agents */\n    agent_id: true,\n    /** @endpoints assistants, azureAssistants */\n    assistant_id: true,\n    /** @endpoints assistants, azureAssistants */\n    append_current_datetime: true,\n    /**\n     * @endpoints assistants, azureAssistants\n     *\n     * Overrides existing assistant instructions, only used for the current run:\n     * https://platform.openai.com/docs/api-reference/runs/createRun#runs-createrun-instructions\n     * */\n    instructions: true,\n  })\n  .merge(\n    z.object({\n      /** @endpoints openAI, custom, azureOpenAI, google, anthropic, assistants, azureAssistants, bedrock, agents */\n      endpoint: extendedModelEndpointSchema.nullable(),\n    }),\n  );\n\nexport type TPreset = z.infer<typeof tPresetSchema>;\n\nexport type TSetOption = (\n  param: number | string,\n) => (newValue: number | string | boolean | string[] | Partial<TPreset>) => void;\n\nexport type TConversation = z.infer<typeof tConversationSchema> & {\n  presetOverride?: Partial<TPreset>;\n  disableParams?: boolean;\n};\n\nexport const tSharedLinkSchema = z.object({\n  conversationId: z.string(),\n  shareId: z.string(),\n  messages: z.array(z.string()),\n  isPublic: z.boolean(),\n  title: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport type TSharedLink = z.infer<typeof tSharedLinkSchema>;\n\nexport const tConversationTagSchema = z.object({\n  _id: z.string(),\n  user: z.string(),\n  tag: z.string(),\n  description: z.string().optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  count: z.number(),\n  position: z.number(),\n});\nexport type TConversationTag = z.infer<typeof tConversationTagSchema>;\n\nexport const googleBaseSchema = tConversationSchema.pick({\n  model: true,\n  modelLabel: true,\n  promptPrefix: true,\n  examples: true,\n  temperature: true,\n  maxOutputTokens: true,\n  artifacts: true,\n  topP: true,\n  topK: true,\n  thinking: true,\n  thinkingBudget: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n  maxContextTokens: true,\n});\n\nexport const googleSchema = googleBaseSchema\n  .transform((obj: Partial<TConversation>) => removeNullishValues(obj))\n  .catch(() => ({}));\n\n/**\n   * TODO: Map the following fields:\n  - presence_penalty -> presencePenalty\n  - frequency_penalty -> frequencyPenalty\n  - stop -> stopSequences\n   */\nexport const googleGenConfigSchema = z\n  .object({\n    maxOutputTokens: coerceNumber.optional(),\n    temperature: coerceNumber.optional(),\n    topP: coerceNumber.optional(),\n    topK: coerceNumber.optional(),\n    presencePenalty: coerceNumber.optional(),\n    frequencyPenalty: coerceNumber.optional(),\n    stopSequences: z.array(z.string()).optional(),\n    thinkingConfig: z\n      .object({\n        includeThoughts: z.boolean().optional(),\n        thinkingBudget: coerceNumber.optional(),\n      })\n      .optional(),\n  })\n  .strip()\n  .optional();\n\nconst gptPluginsBaseSchema = tConversationSchema.pick({\n  model: true,\n  modelLabel: true,\n  chatGptLabel: true,\n  promptPrefix: true,\n  temperature: true,\n  artifacts: true,\n  top_p: true,\n  presence_penalty: true,\n  frequency_penalty: true,\n  tools: true,\n  agentOptions: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n  maxContextTokens: true,\n});\n\nexport const gptPluginsSchema = gptPluginsBaseSchema\n  .transform((obj) => {\n    const result = {\n      ...obj,\n      model: obj.model ?? 'gpt-3.5-turbo',\n      chatGptLabel: obj.chatGptLabel ?? obj.modelLabel ?? null,\n      promptPrefix: obj.promptPrefix ?? null,\n      temperature: obj.temperature ?? 0.8,\n      top_p: obj.top_p ?? 1,\n      presence_penalty: obj.presence_penalty ?? 0,\n      frequency_penalty: obj.frequency_penalty ?? 0,\n      tools: obj.tools ?? [],\n      agentOptions: obj.agentOptions ?? {\n        agent: EAgent.functions,\n        skipCompletion: true,\n        model: 'gpt-3.5-turbo',\n        temperature: 0,\n      },\n      iconURL: obj.iconURL ?? undefined,\n      greeting: obj.greeting ?? undefined,\n      spec: obj.spec ?? undefined,\n      maxContextTokens: obj.maxContextTokens ?? undefined,\n    };\n\n    if (obj.modelLabel != null && obj.modelLabel !== '') {\n      result.modelLabel = null;\n    }\n\n    return result;\n  })\n  .catch(() => ({\n    model: 'gpt-3.5-turbo',\n    chatGptLabel: null,\n    promptPrefix: null,\n    temperature: 0.8,\n    top_p: 1,\n    presence_penalty: 0,\n    frequency_penalty: 0,\n    tools: [],\n    agentOptions: {\n      agent: EAgent.functions,\n      skipCompletion: true,\n      model: 'gpt-3.5-turbo',\n      temperature: 0,\n    },\n    iconURL: undefined,\n    greeting: undefined,\n    spec: undefined,\n    maxContextTokens: undefined,\n  }));\n\nexport function removeNullishValues<T extends Record<string, unknown>>(\n  obj: T,\n  removeEmptyStrings?: boolean,\n): Partial<T> {\n  const newObj: Partial<T> = { ...obj };\n\n  (Object.keys(newObj) as Array<keyof T>).forEach((key) => {\n    const value = newObj[key];\n    if (value === undefined || value === null) {\n      delete newObj[key];\n    }\n    if (removeEmptyStrings && typeof value === 'string' && value === '') {\n      delete newObj[key];\n    }\n  });\n\n  return newObj;\n}\n\nconst assistantBaseSchema = tConversationSchema.pick({\n  model: true,\n  assistant_id: true,\n  instructions: true,\n  artifacts: true,\n  promptPrefix: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n  append_current_datetime: true,\n});\n\nexport const assistantSchema = assistantBaseSchema\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? openAISettings.model.default,\n    assistant_id: obj.assistant_id ?? undefined,\n    instructions: obj.instructions ?? undefined,\n    promptPrefix: obj.promptPrefix ?? null,\n    iconURL: obj.iconURL ?? undefined,\n    greeting: obj.greeting ?? undefined,\n    spec: obj.spec ?? undefined,\n    append_current_datetime: obj.append_current_datetime ?? false,\n  }))\n  .catch(() => ({\n    model: openAISettings.model.default,\n    assistant_id: undefined,\n    instructions: undefined,\n    promptPrefix: null,\n    iconURL: undefined,\n    greeting: undefined,\n    spec: undefined,\n    append_current_datetime: false,\n  }));\n\nconst compactAssistantBaseSchema = tConversationSchema.pick({\n  model: true,\n  assistant_id: true,\n  instructions: true,\n  promptPrefix: true,\n  artifacts: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n});\n\nexport const compactAssistantSchema = compactAssistantBaseSchema\n  .transform((obj) => removeNullishValues(obj))\n  .catch(() => ({}));\n\nexport const agentsBaseSchema = tConversationSchema.pick({\n  model: true,\n  modelLabel: true,\n  temperature: true,\n  top_p: true,\n  presence_penalty: true,\n  frequency_penalty: true,\n  resendFiles: true,\n  imageDetail: true,\n  agent_id: true,\n  instructions: true,\n  promptPrefix: true,\n  iconURL: true,\n  greeting: true,\n  maxContextTokens: true,\n});\n\nexport const agentsSchema = agentsBaseSchema\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? agentsSettings.model.default,\n    modelLabel: obj.modelLabel ?? null,\n    temperature: obj.temperature ?? 1,\n    top_p: obj.top_p ?? 1,\n    presence_penalty: obj.presence_penalty ?? 0,\n    frequency_penalty: obj.frequency_penalty ?? 0,\n    resendFiles:\n      typeof obj.resendFiles === 'boolean' ? obj.resendFiles : agentsSettings.resendFiles.default,\n    imageDetail: obj.imageDetail ?? ImageDetail.auto,\n    agent_id: obj.agent_id ?? undefined,\n    instructions: obj.instructions ?? undefined,\n    promptPrefix: obj.promptPrefix ?? null,\n    iconURL: obj.iconURL ?? undefined,\n    greeting: obj.greeting ?? undefined,\n    maxContextTokens: obj.maxContextTokens ?? undefined,\n  }))\n  .catch(() => ({\n    model: agentsSettings.model.default,\n    modelLabel: null,\n    temperature: 1,\n    top_p: 1,\n    presence_penalty: 0,\n    frequency_penalty: 0,\n    resendFiles: agentsSettings.resendFiles.default,\n    imageDetail: ImageDetail.auto,\n    agent_id: undefined,\n    instructions: undefined,\n    promptPrefix: null,\n    iconURL: undefined,\n    greeting: undefined,\n    maxContextTokens: undefined,\n  }));\n\nexport const openAIBaseSchema = tConversationSchema.pick({\n  model: true,\n  modelLabel: true,\n  chatGptLabel: true,\n  promptPrefix: true,\n  temperature: true,\n  top_p: true,\n  presence_penalty: true,\n  frequency_penalty: true,\n  resendFiles: true,\n  artifacts: true,\n  imageDetail: true,\n  stop: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n  maxContextTokens: true,\n  max_tokens: true,\n  reasoning_effort: true,\n});\n\nexport const openAISchema = openAIBaseSchema\n  .transform((obj: Partial<TConversation>) => removeNullishValues(obj))\n  .catch(() => ({}));\n\nexport const compactGoogleSchema = googleBaseSchema\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    if (newObj.temperature === google.temperature.default) {\n      delete newObj.temperature;\n    }\n    if (newObj.maxOutputTokens === google.maxOutputTokens.default) {\n      delete newObj.maxOutputTokens;\n    }\n    if (newObj.topP === google.topP.default) {\n      delete newObj.topP;\n    }\n    if (newObj.topK === google.topK.default) {\n      delete newObj.topK;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nexport const anthropicBaseSchema = tConversationSchema.pick({\n  model: true,\n  modelLabel: true,\n  promptPrefix: true,\n  temperature: true,\n  maxOutputTokens: true,\n  topP: true,\n  topK: true,\n  resendFiles: true,\n  promptCache: true,\n  thinking: true,\n  thinkingBudget: true,\n  artifacts: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n  maxContextTokens: true,\n});\n\nexport const anthropicSchema = anthropicBaseSchema\n  .transform((obj) => removeNullishValues(obj))\n  .catch(() => ({}));\n\nexport const compactPluginsSchema = gptPluginsBaseSchema\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    if (newObj.modelLabel === null) {\n      delete newObj.modelLabel;\n    }\n    if (newObj.chatGptLabel === null) {\n      delete newObj.chatGptLabel;\n    }\n    if (newObj.promptPrefix === null) {\n      delete newObj.promptPrefix;\n    }\n    if (newObj.temperature === 0.8) {\n      delete newObj.temperature;\n    }\n    if (newObj.top_p === 1) {\n      delete newObj.top_p;\n    }\n    if (newObj.presence_penalty === 0) {\n      delete newObj.presence_penalty;\n    }\n    if (newObj.frequency_penalty === 0) {\n      delete newObj.frequency_penalty;\n    }\n    if (newObj.tools?.length === 0) {\n      delete newObj.tools;\n    }\n\n    if (\n      newObj.agentOptions &&\n      newObj.agentOptions.agent === EAgent.functions &&\n      newObj.agentOptions.skipCompletion === true &&\n      newObj.agentOptions.model === 'gpt-3.5-turbo' &&\n      newObj.agentOptions.temperature === 0\n    ) {\n      delete newObj.agentOptions;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nexport const tBannerSchema = z.object({\n  bannerId: z.string(),\n  message: z.string(),\n  displayFrom: z.string(),\n  displayTo: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  isPublic: z.boolean(),\n});\nexport type TBanner = z.infer<typeof tBannerSchema>;\n\nexport const compactAgentsBaseSchema = tConversationSchema.pick({\n  spec: true,\n  // model: true,\n  iconURL: true,\n  greeting: true,\n  agent_id: true,\n  instructions: true,\n  additional_instructions: true,\n});\n\nexport const compactAgentsSchema = compactAgentsBaseSchema\n  .transform((obj) => removeNullishValues(obj))\n  .catch(() => ({}));\n","import { z } from 'zod';\nimport type { TPreset } from './schemas';\nimport {\n  EModelEndpoint,\n  tPresetSchema,\n  eModelEndpointSchema,\n  AuthType,\n  authTypeSchema,\n} from './schemas';\n\nexport type TModelSpec = {\n  name: string;\n  label: string;\n  preset: TPreset;\n  order?: number;\n  default?: boolean;\n  description?: string;\n  showIconInMenu?: boolean;\n  showIconInHeader?: boolean;\n  iconURL?: string | EModelEndpoint; // Allow using project-included icons\n  authType?: AuthType;\n};\n\nexport const tModelSpecSchema = z.object({\n  name: z.string(),\n  label: z.string(),\n  preset: tPresetSchema,\n  order: z.number().optional(),\n  default: z.boolean().optional(),\n  description: z.string().optional(),\n  showIconInMenu: z.boolean().optional(),\n  showIconInHeader: z.boolean().optional(),\n  iconURL: z.union([z.string(), eModelEndpointSchema]).optional(),\n  authType: authTypeSchema.optional(),\n});\n\nexport const specsConfigSchema = z.object({\n  enforce: z.boolean().default(false),\n  prioritize: z.boolean().default(true),\n  list: z.array(tModelSpecSchema).min(1),\n  addedEndpoints: z.array(z.union([z.string(), eModelEndpointSchema])).optional(),\n});\n\nexport type TSpecsConfig = z.infer<typeof specsConfigSchema>;\n","import { z } from 'zod';\nimport { EModelEndpoint } from './schemas';\nimport type { EndpointFileConfig, FileConfig } from './types/files';\n\nexport const supportsFiles = {\n  [EModelEndpoint.openAI]: true,\n  [EModelEndpoint.google]: true,\n  [EModelEndpoint.assistants]: true,\n  [EModelEndpoint.azureAssistants]: true,\n  [EModelEndpoint.agents]: true,\n  [EModelEndpoint.azureOpenAI]: true,\n  [EModelEndpoint.anthropic]: true,\n  [EModelEndpoint.custom]: true,\n  [EModelEndpoint.bedrock]: true,\n};\n\nexport const excelFileTypes = [\n  'application/vnd.ms-excel',\n  'application/msexcel',\n  'application/x-msexcel',\n  'application/x-ms-excel',\n  'application/x-excel',\n  'application/x-dos_ms_excel',\n  'application/xls',\n  'application/x-xls',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n];\n\nexport const fullMimeTypesList = [\n  'text/x-c',\n  'text/x-c++',\n  'application/csv',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'text/html',\n  'text/x-java',\n  'application/json',\n  'text/markdown',\n  'application/pdf',\n  'text/x-php',\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'text/x-python',\n  'text/x-script.python',\n  'text/x-ruby',\n  'text/x-tex',\n  'text/plain',\n  'text/css',\n  'text/vtt',\n  'image/jpeg',\n  'text/javascript',\n  'image/gif',\n  'image/png',\n  'image/heic',\n  'image/heif',\n  'application/x-tar',\n  'application/typescript',\n  'application/xml',\n  'application/zip',\n  'image/svg',\n  'image/svg+xml',\n  ...excelFileTypes,\n];\n\nexport const codeInterpreterMimeTypesList = [\n  'text/x-c',\n  'text/x-c++',\n  'application/csv',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'text/html',\n  'text/x-java',\n  'application/json',\n  'text/markdown',\n  'application/pdf',\n  'text/x-php',\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'text/x-python',\n  'text/x-script.python',\n  'text/x-ruby',\n  'text/x-tex',\n  'text/plain',\n  'text/css',\n  'image/jpeg',\n  'text/javascript',\n  'image/gif',\n  'image/png',\n  'image/heic',\n  'image/heif',\n  'application/x-tar',\n  'application/typescript',\n  'application/xml',\n  'application/zip',\n  ...excelFileTypes,\n];\n\nexport const retrievalMimeTypesList = [\n  'text/x-c',\n  'text/x-c++',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'text/html',\n  'text/x-java',\n  'application/json',\n  'text/markdown',\n  'application/pdf',\n  'text/x-php',\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'text/x-python',\n  'text/x-script.python',\n  'text/x-ruby',\n  'text/x-tex',\n  'text/plain',\n];\n\nexport const imageExtRegex = /\\.(jpg|jpeg|png|gif|webp|heic|heif)$/i;\n\nexport const excelMimeTypes =\n  /^application\\/(vnd\\.ms-excel|msexcel|x-msexcel|x-ms-excel|x-excel|x-dos_ms_excel|xls|x-xls|vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet)$/;\n\nexport const textMimeTypes =\n  /^(text\\/(x-c|x-csharp|tab-separated-values|x-c\\+\\+|x-h|x-java|html|markdown|x-php|x-python|x-script\\.python|x-ruby|x-tex|plain|css|vtt|javascript|csv))$/;\n\nexport const applicationMimeTypes =\n  /^(application\\/(epub\\+zip|csv|json|pdf|x-tar|typescript|vnd\\.openxmlformats-officedocument\\.(wordprocessingml\\.document|presentationml\\.presentation|spreadsheetml\\.sheet)|xml|zip))$/;\n\nexport const imageMimeTypes = /^image\\/(jpeg|gif|png|webp|heic|heif)$/;\n\nexport const supportedMimeTypes = [\n  textMimeTypes,\n  excelMimeTypes,\n  applicationMimeTypes,\n  imageMimeTypes,\n  /** Supported by LC Code Interpreter PAI */\n  /^image\\/(svg|svg\\+xml)$/,\n];\n\nexport const codeInterpreterMimeTypes = [\n  textMimeTypes,\n  excelMimeTypes,\n  applicationMimeTypes,\n  imageMimeTypes,\n];\n\nexport const codeTypeMapping: { [key: string]: string } = {\n  c: 'text/x-c',\n  cs: 'text/x-csharp',\n  cpp: 'text/x-c++',\n  h: 'text/x-h',\n  md: 'text/markdown',\n  php: 'text/x-php',\n  py: 'text/x-python',\n  rb: 'text/x-ruby',\n  tex: 'text/x-tex',\n  js: 'text/javascript',\n  sh: 'application/x-sh',\n  ts: 'application/typescript',\n  tar: 'application/x-tar',\n  zip: 'application/zip',\n  yml: 'application/x-yaml',\n  yaml: 'application/x-yaml',\n  log: 'text/plain',\n  tsv: 'text/tab-separated-values',\n};\n\nexport const retrievalMimeTypes = [\n  /^(text\\/(x-c|x-c\\+\\+|x-h|html|x-java|markdown|x-php|x-python|x-script\\.python|x-ruby|x-tex|plain|vtt|xml))$/,\n  /^(application\\/(json|pdf|vnd\\.openxmlformats-officedocument\\.(wordprocessingml\\.document|presentationml\\.presentation)))$/,\n];\n\nexport const megabyte = 1024 * 1024;\n/** Helper function to get megabytes value */\nexport const mbToBytes = (mb: number): number => mb * megabyte;\n\nconst defaultSizeLimit = mbToBytes(512);\nconst assistantsFileConfig = {\n  fileLimit: 10,\n  fileSizeLimit: defaultSizeLimit,\n  totalSizeLimit: defaultSizeLimit,\n  supportedMimeTypes,\n  disabled: false,\n};\n\nexport const fileConfig = {\n  endpoints: {\n    [EModelEndpoint.assistants]: assistantsFileConfig,\n    [EModelEndpoint.azureAssistants]: assistantsFileConfig,\n    [EModelEndpoint.agents]: assistantsFileConfig,\n    default: {\n      fileLimit: 10,\n      fileSizeLimit: defaultSizeLimit,\n      totalSizeLimit: defaultSizeLimit,\n      supportedMimeTypes,\n      disabled: false,\n    },\n  },\n  serverFileSizeLimit: defaultSizeLimit,\n  avatarSizeLimit: mbToBytes(2),\n  clientImageResize: {\n    enabled: false,\n    maxWidth: 1900,\n    maxHeight: 1900,\n    quality: 0.92,\n  },\n  checkType: function (fileType: string, supportedTypes: RegExp[] = supportedMimeTypes) {\n    return supportedTypes.some((regex) => regex.test(fileType));\n  },\n};\n\nconst supportedMimeTypesSchema = z\n  .array(z.any())\n  .optional()\n  .refine(\n    (mimeTypes) => {\n      if (!mimeTypes) {\n        return true;\n      }\n      return mimeTypes.every(\n        (mimeType) => mimeType instanceof RegExp || typeof mimeType === 'string',\n      );\n    },\n    {\n      message: 'Each mimeType must be a string or a RegExp object.',\n    },\n  );\n\nexport const endpointFileConfigSchema = z.object({\n  disabled: z.boolean().optional(),\n  fileLimit: z.number().min(0).optional(),\n  fileSizeLimit: z.number().min(0).optional(),\n  totalSizeLimit: z.number().min(0).optional(),\n  supportedMimeTypes: supportedMimeTypesSchema.optional(),\n});\n\nexport const fileConfigSchema = z.object({\n  endpoints: z.record(endpointFileConfigSchema).optional(),\n  serverFileSizeLimit: z.number().min(0).optional(),\n  avatarSizeLimit: z.number().min(0).optional(),\n  imageGeneration: z\n    .object({\n      percentage: z.number().min(0).max(100).optional(),\n      px: z.number().min(0).optional(),\n    })\n    .optional(),\n  clientImageResize: z\n    .object({\n      enabled: z.boolean().optional(),\n      maxWidth: z.number().min(0).optional(),\n      maxHeight: z.number().min(0).optional(),\n      quality: z.number().min(0).max(1).optional(),\n    })\n    .optional(),\n});\n\n/** Helper function to safely convert string patterns to RegExp objects */\nexport const convertStringsToRegex = (patterns: string[]): RegExp[] =>\n  patterns.reduce((acc: RegExp[], pattern) => {\n    try {\n      const regex = new RegExp(pattern);\n      acc.push(regex);\n    } catch (error) {\n      console.error(`Invalid regex pattern \"${pattern}\" skipped.`, error);\n    }\n    return acc;\n  }, []);\n\nexport function mergeFileConfig(dynamic: z.infer<typeof fileConfigSchema> | undefined): FileConfig {\n  const mergedConfig = fileConfig as FileConfig;\n  if (!dynamic) {\n    return mergedConfig;\n  }\n\n  if (dynamic.serverFileSizeLimit !== undefined) {\n    mergedConfig.serverFileSizeLimit = mbToBytes(dynamic.serverFileSizeLimit);\n  }\n\n  if (dynamic.avatarSizeLimit !== undefined) {\n    mergedConfig.avatarSizeLimit = mbToBytes(dynamic.avatarSizeLimit);\n  }\n\n  // Merge clientImageResize configuration\n  if (dynamic.clientImageResize !== undefined) {\n    mergedConfig.clientImageResize = {\n      ...mergedConfig.clientImageResize,\n      ...dynamic.clientImageResize,\n    };\n  }\n\n  if (!dynamic.endpoints) {\n    return mergedConfig;\n  }\n\n  for (const key in dynamic.endpoints) {\n    const dynamicEndpoint = (dynamic.endpoints as Record<string, EndpointFileConfig>)[key];\n\n    if (!mergedConfig.endpoints[key]) {\n      mergedConfig.endpoints[key] = {};\n    }\n\n    const mergedEndpoint = mergedConfig.endpoints[key];\n\n    if (dynamicEndpoint.disabled === true) {\n      mergedEndpoint.disabled = true;\n      mergedEndpoint.fileLimit = 0;\n      mergedEndpoint.fileSizeLimit = 0;\n      mergedEndpoint.totalSizeLimit = 0;\n      mergedEndpoint.supportedMimeTypes = [];\n      continue;\n    }\n\n    if (dynamicEndpoint.fileSizeLimit !== undefined) {\n      mergedEndpoint.fileSizeLimit = mbToBytes(dynamicEndpoint.fileSizeLimit);\n    }\n\n    if (dynamicEndpoint.totalSizeLimit !== undefined) {\n      mergedEndpoint.totalSizeLimit = mbToBytes(dynamicEndpoint.totalSizeLimit);\n    }\n\n    const configKeys = ['fileLimit'] as const;\n    configKeys.forEach((field) => {\n      if (dynamicEndpoint[field] !== undefined) {\n        mergedEndpoint[field] = dynamicEndpoint[field];\n      }\n    });\n\n    if (dynamicEndpoint.supportedMimeTypes) {\n      mergedEndpoint.supportedMimeTypes = convertStringsToRegex(\n        dynamicEndpoint.supportedMimeTypes as unknown as string[],\n      );\n    }\n  }\n\n  return mergedConfig;\n}\n","import { EToolResources } from './assistants';\n\nexport enum FileSources {\n  local = 'local',\n  firebase = 'firebase',\n  azure = 'azure',\n  azure_blob = 'azure_blob',\n  openai = 'openai',\n  s3 = 's3',\n  vectordb = 'vectordb',\n  execute_code = 'execute_code',\n  mistral_ocr = 'mistral_ocr',\n  azure_mistral_ocr = 'azure_mistral_ocr',\n  text = 'text',\n}\n\nexport const checkOpenAIStorage = (source: string) =>\n  source === FileSources.openai || source === FileSources.azure;\n\nexport enum FileContext {\n  avatar = 'avatar',\n  unknown = 'unknown',\n  agents = 'agents',\n  assistants = 'assistants',\n  execute_code = 'execute_code',\n  image_generation = 'image_generation',\n  assistants_output = 'assistants_output',\n  message_attachment = 'message_attachment',\n  filename = 'filename',\n  updatedAt = 'updatedAt',\n  source = 'source',\n  filterSource = 'filterSource',\n  context = 'context',\n  bytes = 'bytes',\n}\n\nexport type EndpointFileConfig = {\n  disabled?: boolean;\n  fileLimit?: number;\n  fileSizeLimit?: number;\n  totalSizeLimit?: number;\n  supportedMimeTypes?: RegExp[];\n};\n\nexport type FileConfig = {\n  endpoints: {\n    [key: string]: EndpointFileConfig;\n  };\n  serverFileSizeLimit?: number;\n  avatarSizeLimit?: number;\n  clientImageResize?: {\n    enabled?: boolean;\n    maxWidth?: number;\n    maxHeight?: number;\n    quality?: number;\n  };\n  checkType?: (fileType: string, supportedTypes: RegExp[]) => boolean;\n};\n\nexport type TFile = {\n  _id?: string;\n  __v?: number;\n  user: string;\n  conversationId?: string;\n  message?: string;\n  file_id: string;\n  temp_file_id?: string;\n  bytes: number;\n  embedded: boolean;\n  filename: string;\n  filepath: string;\n  object: 'file';\n  type: string;\n  usage: number;\n  context?: FileContext;\n  source?: FileSources;\n  filterSource?: FileSources;\n  width?: number;\n  height?: number;\n  expiresAt?: string | Date;\n  preview?: string;\n  metadata?: { fileIdentifier?: string };\n  createdAt?: string | Date;\n  updatedAt?: string | Date;\n};\n\nexport type TFileUpload = TFile & {\n  temp_file_id: string;\n};\n\nexport type AvatarUploadResponse = {\n  url: string;\n};\n\nexport type SpeechToTextResponse = {\n  text: string;\n};\n\nexport type VoiceResponse = string[];\n\nexport type UploadMutationOptions = {\n  onSuccess?: (data: TFileUpload, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type UploadAvatarOptions = {\n  onSuccess?: (data: AvatarUploadResponse, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type SpeechToTextOptions = {\n  onSuccess?: (data: SpeechToTextResponse, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type TextToSpeechOptions = {\n  onSuccess?: (data: ArrayBuffer, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type VoiceOptions = {\n  onSuccess?: (data: VoiceResponse, variables: unknown, context?: unknown) => void;\n  onMutate?: () => void | Promise<unknown>;\n  onError?: (error: unknown, variables: unknown, context?: unknown) => void;\n};\n\nexport type DeleteFilesResponse = {\n  message: string;\n  result: Record<string, unknown>;\n};\n\nexport type BatchFile = {\n  file_id: string;\n  filepath: string;\n  embedded: boolean;\n  source: FileSources;\n  temp_file_id?: string;\n};\n\nexport type DeleteFilesBody = {\n  files: BatchFile[];\n  agent_id?: string;\n  assistant_id?: string;\n  tool_resource?: EToolResources;\n};\n\nexport type DeleteMutationOptions = {\n  onSuccess?: (data: DeleteFilesResponse, variables: DeleteFilesBody, context?: unknown) => void;\n  onMutate?: (variables: DeleteFilesBody) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: DeleteFilesBody, context?: unknown) => void;\n};\n","/* eslint-disable @typescript-eslint/no-namespace */\nimport { StepTypes, ContentTypes, ToolCallTypes } from './runs';\nimport type { TAttachment, TPlugin } from 'src/schemas';\nimport type { FunctionToolCall } from './assistants';\n\nexport namespace Agents {\n  export type MessageType = 'human' | 'ai' | 'generic' | 'system' | 'function' | 'tool' | 'remove';\n\n  export type ImageDetail = 'auto' | 'low' | 'high';\n\n  export type ReasoningContentText = {\n    type: ContentTypes.THINK;\n    think: string;\n  };\n\n  export type MessageContentText = {\n    type: ContentTypes.TEXT;\n    text: string;\n    tool_call_ids?: string[];\n  };\n\n  export type AgentUpdate = {\n    type: ContentTypes.AGENT_UPDATE;\n    agent_update: {\n      index: number;\n      runId: string;\n      agentId: string;\n    };\n  };\n\n  export type MessageContentImageUrl = {\n    type: ContentTypes.IMAGE_URL;\n    image_url: string | { url: string; detail?: ImageDetail };\n  };\n\n  export type MessageContentComplex =\n    | ReasoningContentText\n    | AgentUpdate\n    | MessageContentText\n    | MessageContentImageUrl\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    | (Record<string, any> & { type?: ContentTypes | string })\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    | (Record<string, any> & { type?: never });\n\n  export type MessageContent = string | MessageContentComplex[];\n\n  /**\n   * A call to a tool.\n   */\n  export type ToolCall = {\n    /** Type (\"tool_call\") according to Assistants Tool Call Structure */\n    type: ToolCallTypes.TOOL_CALL;\n    /** The name of the tool to be called */\n    name: string;\n\n    /** The arguments to the tool call */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    args?: string | Record<string, any>;\n\n    /** If provided, an identifier associated with the tool call */\n    id?: string;\n    /** If provided, the output of the tool call */\n    output?: string;\n    /** Auth URL */\n    auth?: string;\n    /** Expiration time */\n    expires_at?: number;\n  };\n\n  export type ToolEndEvent = {\n    /** The Step Id of the Tool Call */\n    id: string;\n    /** The Completed Tool Call */\n    tool_call?: ToolCall;\n    /** The content index of the tool call */\n    index: number;\n  };\n\n  export type ToolCallContent = {\n    type: ContentTypes.TOOL_CALL;\n    tool_call?: ToolCall;\n  };\n\n  /**\n   * A chunk of a tool call (e.g., as part of a stream).\n   * When merging ToolCallChunks (e.g., via AIMessageChunk.__add__),\n   * all string attributes are concatenated. Chunks are only merged if their\n   * values of `index` are equal and not None.\n   *\n   * @example\n   * ```ts\n   * const leftChunks = [\n   *   {\n   *     name: \"foo\",\n   *     args: '{\"a\":',\n   *     index: 0\n   *   }\n   * ];\n   *\n   * const leftAIMessageChunk = new AIMessageChunk({\n   *   content: \"\",\n   *   tool_call_chunks: leftChunks\n   * });\n   *\n   * const rightChunks = [\n   *   {\n   *     name: undefined,\n   *     args: '1}',\n   *     index: 0\n   *   }\n   * ];\n   *\n   * const rightAIMessageChunk = new AIMessageChunk({\n   *   content: \"\",\n   *   tool_call_chunks: rightChunks\n   * });\n   *\n   * const result = leftAIMessageChunk.concat(rightAIMessageChunk);\n   * // result.tool_call_chunks is equal to:\n   * // [\n   * //   {\n   * //     name: \"foo\",\n   * //     args: '{\"a\":1}'\n   * //     index: 0\n   * //   }\n   * // ]\n   * ```\n   *\n   * @property {string} [name] - If provided, a substring of the name of the tool to be called\n   * @property {string} [args] - If provided, a JSON substring of the arguments to the tool call\n   * @property {string} [id] - If provided, a substring of an identifier for the tool call\n   * @property {number} [index] - If provided, the index of the tool call in a sequence\n   */\n  export type ToolCallChunk = {\n    name?: string;\n\n    args?: string;\n\n    id?: string;\n\n    index?: number;\n\n    type?: 'tool_call_chunk';\n  };\n\n  /** Event names are of the format: on_[runnable_type]_(start|stream|end).\n\n  Runnable types are one of:\n\n  llm - used by non chat models\n  chat_model - used by chat models\n  prompt -- e.g., ChatPromptTemplate\n  tool -- LangChain tools\n  chain - most Runnables are of this type\n  Further, the events are categorized as one of:\n\n  start - when the runnable starts\n  stream - when the runnable is streaming\n  end - when the runnable ends\n  start, stream and end are associated with slightly different data payload.\n\n  Please see the documentation for EventData for more details. */\n  export type EventName = string;\n  export type RunStep = {\n    type: StepTypes;\n    id: string; // #new\n    runId?: string; // #new\n    index: number; // #new\n    stepIndex?: number; // #new\n    stepDetails: StepDetails;\n    usage: null | object;\n  };\n  /**\n   * Represents a run step delta i.e. any changed fields on a run step during\n   * streaming.\n   */\n  export interface RunStepDeltaEvent {\n    /**\n     * The identifier of the run step, which can be referenced in API endpoints.\n     */\n    id: string;\n    /**\n     * The delta containing the fields that have changed on the run step.\n     */\n    delta: ToolCallDelta;\n  }\n  export type StepDetails = MessageCreationDetails | ToolCallsDetails;\n  export type MessageCreationDetails = {\n    type: StepTypes.MESSAGE_CREATION;\n    message_creation: {\n      message_id: string;\n    };\n  };\n  export type ToolCallsDetails = {\n    type: StepTypes.TOOL_CALLS;\n    tool_calls: AgentToolCall[];\n  };\n  export type ToolCallDelta = {\n    type: StepTypes.TOOL_CALLS | string;\n    tool_calls?: ToolCallChunk[];\n    auth?: string;\n    expires_at?: number;\n  };\n  export type AgentToolCall = FunctionToolCall | ToolCall;\n  export interface ExtendedMessageContent {\n    type?: string;\n    text?: string;\n    input?: string;\n    index?: number;\n    id?: string;\n    name?: string;\n  }\n  /**\n   * Represents a message delta i.e. any changed fields on a message during\n   * streaming.\n   */\n  export interface MessageDeltaEvent {\n    /**\n     * The identifier of the message, which can be referenced in API endpoints.\n     */\n    id: string;\n    /**\n     * The delta containing the fields that have changed on the Message.\n     */\n    delta: MessageDelta;\n  }\n  /**\n   * The delta containing the fields that have changed on the Message.\n   */\n  export interface MessageDelta {\n    /**\n     * The content of the message in array of text and/or images.\n     */\n    content?: Agents.MessageContentComplex[];\n  }\n\n  /**\n   * Represents a reasoning delta i.e. any changed fields on a message during\n   * streaming.\n   */\n  export interface ReasoningDeltaEvent {\n    /**\n     * The identifier of the message, which can be referenced in API endpoints.\n     */\n    id: string;\n\n    /**\n     * The delta containing the fields that have changed.\n     */\n    delta: ReasoningDelta;\n  }\n\n  /**\n   * The reasoning delta containing the fields that have changed on the Message.\n   */\n  export interface ReasoningDelta {\n    /**\n     * The content of the message in array of text and/or images.\n     */\n    content?: MessageContentComplex[];\n  }\n\n  export type ReasoningDeltaUpdate = { type: ContentTypes.THINK; think: string };\n  export type ContentType =\n    | ContentTypes.THINK\n    | ContentTypes.TEXT\n    | ContentTypes.IMAGE_URL\n    | string;\n}\n\nexport type ToolCallResult = {\n  user: string;\n  toolId: string;\n  result?: unknown;\n  messageId: string;\n  partIndex?: number;\n  blockIndex?: number;\n  conversationId: string;\n  attachments?: TAttachment[];\n};\n\nexport enum AuthTypeEnum {\n  ServiceHttp = 'service_http',\n  OAuth = 'oauth',\n  None = 'none',\n}\n\nexport enum AuthorizationTypeEnum {\n  Bearer = 'bearer',\n  Basic = 'basic',\n  Custom = 'custom',\n}\n\nexport enum TokenExchangeMethodEnum {\n  DefaultPost = 'default_post',\n  BasicAuthHeader = 'basic_auth_header',\n}\n\nexport type Action = {\n  action_id: string;\n  type?: string;\n  settings?: Record<string, unknown>;\n  metadata: ActionMetadata;\n  version: number | string;\n} & ({ assistant_id: string; agent_id?: never } | { assistant_id?: never; agent_id: string });\n\nexport type ActionMetadata = {\n  api_key?: string;\n  auth?: ActionAuth;\n  domain?: string;\n  privacy_policy_url?: string;\n  raw_spec?: string;\n  oauth_client_id?: string;\n  oauth_client_secret?: string;\n};\n\nexport type ActionAuth = {\n  authorization_type?: AuthorizationTypeEnum;\n  custom_auth_header?: string;\n  type?: AuthTypeEnum;\n  authorization_content_type?: string;\n  authorization_url?: string;\n  client_url?: string;\n  scope?: string;\n  token_exchange_method?: TokenExchangeMethodEnum;\n};\n\nexport type ActionMetadataRuntime = ActionMetadata & {\n  oauth_access_token?: string;\n  oauth_refresh_token?: string;\n  oauth_token_expires_at?: Date;\n};\n\nexport type MCP = {\n  mcp_id: string;\n  metadata: MCPMetadata;\n} & ({ assistant_id: string; agent_id?: never } | { assistant_id?: never; agent_id: string });\n\nexport type MCPMetadata = Omit<ActionMetadata, 'auth'> & {\n  name?: string;\n  description?: string;\n  url?: string;\n  tools?: string[];\n  auth?: MCPAuth;\n  icon?: string;\n  trust?: boolean;\n};\n\nexport type MCPAuth = ActionAuth;\n\nexport type AgentToolType = {\n  tool_id: string;\n  metadata: ToolMetadata;\n} & ({ assistant_id: string; agent_id?: never } | { assistant_id?: never; agent_id: string });\n\nexport type ToolMetadata = TPlugin;\n","export const envVarRegex = /^\\${(.+)}$/;\n\n/** Extracts the environment variable name from a template literal string */\nexport function extractVariableName(value: string): string | null {\n  if (!value) {\n    return null;\n  }\n\n  const match = value.trim().match(envVarRegex);\n  return match ? match[1] : null;\n}\n\n/** Extracts the value of an environment variable from a string. */\nexport function extractEnvVariable(value: string) {\n  if (!value) {\n    return value;\n  }\n\n  // Trim the input\n  const trimmed = value.trim();\n\n  // Special case: if it's just a single environment variable\n  const singleMatch = trimmed.match(envVarRegex);\n  if (singleMatch) {\n    const varName = singleMatch[1];\n    return process.env[varName] || trimmed;\n  }\n\n  // For multiple variables, process them using a regex loop\n  const regex = /\\${([^}]+)}/g;\n  let result = trimmed;\n\n  // First collect all matches and their positions\n  const matches = [];\n  let match;\n  while ((match = regex.exec(trimmed)) !== null) {\n    matches.push({\n      fullMatch: match[0],\n      varName: match[1],\n      index: match.index,\n    });\n  }\n\n  // Process matches in reverse order to avoid position shifts\n  for (let i = matches.length - 1; i >= 0; i--) {\n    const { fullMatch, varName, index } = matches[i];\n    const envValue = process.env[varName] || fullMatch;\n\n    // Replace at exact position\n    result = result.substring(0, index) + envValue + result.substring(index + fullMatch.length);\n  }\n\n  return result;\n}\n","import { z } from 'zod';\nimport { TokenExchangeMethodEnum } from './types/agents';\nimport { extractEnvVariable } from './utils';\n\nconst BaseOptionsSchema = z.object({\n  iconPath: z.string().optional(),\n  timeout: z.number().optional(),\n  initTimeout: z.number().optional(),\n  /** Controls visibility in chat dropdown menu (MCPSelect) */\n  chatMenu: z.boolean().optional(),\n  /**\n   * Controls server instruction behavior:\n   * - undefined/not set: No instructions included (default)\n   * - true: Use server-provided instructions\n   * - string: Use custom instructions (overrides server-provided)\n   */\n  serverInstructions: z.union([z.boolean(), z.string()]).optional(),\n  /**\n   * OAuth configuration for SSE and Streamable HTTP transports\n   * - Optional: OAuth can be auto-discovered on 401 responses\n   * - Pre-configured values will skip discovery steps\n   */\n  oauth: z\n    .object({\n      /** OAuth authorization endpoint (optional - can be auto-discovered) */\n      authorization_url: z.string().url().optional(),\n      /** OAuth token endpoint (optional - can be auto-discovered) */\n      token_url: z.string().url().optional(),\n      /** OAuth client ID (optional - can use dynamic registration) */\n      client_id: z.string().optional(),\n      /** OAuth client secret (optional - can use dynamic registration) */\n      client_secret: z.string().optional(),\n      /** OAuth scopes to request */\n      scope: z.string().optional(),\n      /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n      redirect_uri: z.string().url().optional(),\n      /** Token exchange method */\n      token_exchange_method: z.nativeEnum(TokenExchangeMethodEnum).optional(),\n    })\n    .optional(),\n  customUserVars: z\n    .record(\n      z.string(),\n      z.object({\n        title: z.string(),\n        description: z.string(),\n      }),\n    )\n    .optional(),\n});\n\nexport const StdioOptionsSchema = BaseOptionsSchema.extend({\n  type: z.literal('stdio').optional(),\n  /**\n   * The executable to run to start the server.\n   */\n  command: z.string(),\n  /**\n   * Command line arguments to pass to the executable.\n   */\n  args: z.array(z.string()),\n  /**\n   * The environment to use when spawning the process.\n   *\n   * If not specified, the result of getDefaultEnvironment() will be used.\n   * Environment variables can be referenced using ${VAR_NAME} syntax.\n   */\n  env: z\n    .record(z.string(), z.string())\n    .optional()\n    .transform((env) => {\n      if (!env) {\n        return env;\n      }\n\n      const processedEnv: Record<string, string> = {};\n      for (const [key, value] of Object.entries(env)) {\n        processedEnv[key] = extractEnvVariable(value);\n      }\n      return processedEnv;\n    }),\n  /**\n   * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n   *\n   * @type {import('node:child_process').IOType | import('node:stream').Stream | number}\n   *\n   * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n   */\n  stderr: z.any().optional(),\n});\n\nexport const WebSocketOptionsSchema = BaseOptionsSchema.extend({\n  type: z.literal('websocket').optional(),\n  url: z\n    .string()\n    .transform((val: string) => extractEnvVariable(val))\n    .pipe(z.string().url())\n    .refine(\n      (val: string) => {\n        const protocol = new URL(val).protocol;\n        return protocol === 'ws:' || protocol === 'wss:';\n      },\n      {\n        message: 'WebSocket URL must start with ws:// or wss://',\n      },\n    ),\n});\n\nexport const SSEOptionsSchema = BaseOptionsSchema.extend({\n  type: z.literal('sse').optional(),\n  headers: z.record(z.string(), z.string()).optional(),\n  url: z\n    .string()\n    .transform((val: string) => extractEnvVariable(val))\n    .pipe(z.string().url())\n    .refine(\n      (val: string) => {\n        const protocol = new URL(val).protocol;\n        return protocol !== 'ws:' && protocol !== 'wss:';\n      },\n      {\n        message: 'SSE URL must not start with ws:// or wss://',\n      },\n    ),\n});\n\nexport const StreamableHTTPOptionsSchema = BaseOptionsSchema.extend({\n  type: z.literal('streamable-http'),\n  headers: z.record(z.string(), z.string()).optional(),\n  url: z\n    .string()\n    .transform((val: string) => extractEnvVariable(val))\n    .pipe(z.string().url())\n    .refine(\n      (val: string) => {\n        const protocol = new URL(val).protocol;\n        return protocol !== 'ws:' && protocol !== 'wss:';\n      },\n      {\n        message: 'Streamable HTTP URL must not start with ws:// or wss://',\n      },\n    ),\n});\n\nexport const MCPOptionsSchema = z.union([\n  StdioOptionsSchema,\n  WebSocketOptionsSchema,\n  SSEOptionsSchema,\n  StreamableHTTPOptionsSchema,\n]);\n\nexport const MCPServersSchema = z.record(z.string(), MCPOptionsSchema);\n\nexport type MCPOptions = z.infer<typeof MCPOptionsSchema>;\n","import { z } from 'zod';\nimport type { ZodError } from 'zod';\nimport type { TModelsConfig } from './types';\nimport { EModelEndpoint, eModelEndpointSchema } from './schemas';\nimport { specsConfigSchema, TSpecsConfig } from './models';\nimport { fileConfigSchema } from './file-config';\nimport { FileSources } from './types/files';\nimport { MCPServersSchema } from './mcp';\n\nexport const defaultSocialLogins = ['google', 'facebook', 'openid', 'github', 'discord', 'saml'];\n\nexport const defaultRetrievalModels = [\n  'gpt-4o',\n  'o1-preview-2024-09-12',\n  'o1-preview',\n  'o1-mini-2024-09-12',\n  'o1-mini',\n  'o3-mini',\n  'chatgpt-4o-latest',\n  'gpt-4o-2024-05-13',\n  'gpt-4o-2024-08-06',\n  'gpt-4o-mini',\n  'gpt-4o-mini-2024-07-18',\n  'gpt-4-turbo-preview',\n  'gpt-3.5-turbo-0125',\n  'gpt-4-0125-preview',\n  'gpt-4-1106-preview',\n  'gpt-3.5-turbo-1106',\n  'gpt-3.5-turbo-0125',\n  'gpt-4-turbo',\n  'gpt-4-0125',\n  'gpt-4-1106',\n];\n\nexport const excludedKeys = new Set([\n  'conversationId',\n  'title',\n  'iconURL',\n  'greeting',\n  'endpoint',\n  'endpointType',\n  'createdAt',\n  'updatedAt',\n  'expiredAt',\n  'messages',\n  'isArchived',\n  'tags',\n  'user',\n  '__v',\n  '_id',\n  'tools',\n  'model',\n  'files',\n  'spec',\n  'disableParams',\n]);\n\nexport enum SettingsViews {\n  default = 'default',\n  advanced = 'advanced',\n}\n\nexport const fileSourceSchema = z.nativeEnum(FileSources);\n\n// Helper type to extract the shape of the Zod object schema\ntype SchemaShape<T> = T extends z.ZodObject<infer U> ? U : never;\n\n// Helper type to determine the default value or undefined based on whether the field has a default\ntype DefaultValue<T> =\n  T extends z.ZodDefault<z.ZodTypeAny> ? ReturnType<T['_def']['defaultValue']> : undefined;\n\n// Extract default values or undefined from the schema shape\ntype ExtractDefaults<T> = {\n  [P in keyof T]: DefaultValue<T[P]>;\n};\n\nexport type SchemaDefaults<T> = ExtractDefaults<SchemaShape<T>>;\n\nexport type TConfigDefaults = SchemaDefaults<typeof configSchema>;\n\nexport function getSchemaDefaults<Schema extends z.AnyZodObject>(\n  schema: Schema,\n): ExtractDefaults<SchemaShape<Schema>> {\n  const shape = schema.shape;\n  const entries = Object.entries(shape).map(([key, value]) => {\n    if (value instanceof z.ZodDefault) {\n      // Extract default value if it exists\n      return [key, value._def.defaultValue()];\n    }\n    return [key, undefined];\n  });\n\n  // Create the object with the right types\n  return Object.fromEntries(entries) as ExtractDefaults<SchemaShape<Schema>>;\n}\n\nexport const modelConfigSchema = z\n  .object({\n    deploymentName: z.string().optional(),\n    version: z.string().optional(),\n    assistants: z.boolean().optional(),\n  })\n  .or(z.boolean());\n\nexport type TAzureModelConfig = z.infer<typeof modelConfigSchema>;\n\nexport const azureBaseSchema = z.object({\n  apiKey: z.string(),\n  serverless: z.boolean().optional(),\n  instanceName: z.string().optional(),\n  deploymentName: z.string().optional(),\n  assistants: z.boolean().optional(),\n  addParams: z.record(z.any()).optional(),\n  dropParams: z.array(z.string()).optional(),\n  forcePrompt: z.boolean().optional(),\n  version: z.string().optional(),\n  baseURL: z.string().optional(),\n  additionalHeaders: z.record(z.any()).optional(),\n});\n\nexport type TAzureBaseSchema = z.infer<typeof azureBaseSchema>;\n\nexport const azureGroupSchema = z\n  .object({\n    group: z.string(),\n    models: z.record(z.string(), modelConfigSchema),\n  })\n  .required()\n  .and(azureBaseSchema);\n\nexport const azureGroupConfigsSchema = z.array(azureGroupSchema).min(1);\nexport type TAzureGroup = z.infer<typeof azureGroupSchema>;\nexport type TAzureGroups = z.infer<typeof azureGroupConfigsSchema>;\nexport type TAzureModelMapSchema = {\n  // deploymentName?: string;\n  // version?: string;\n  group: string;\n};\n\nexport type TAzureModelGroupMap = Record<string, TAzureModelMapSchema | undefined>;\nexport type TAzureGroupMap = Record<\n  string,\n  (TAzureBaseSchema & { models: Record<string, TAzureModelConfig | undefined> }) | undefined\n>;\n\nexport type TValidatedAzureConfig = {\n  modelNames: string[];\n  modelGroupMap: TAzureModelGroupMap;\n  groupMap: TAzureGroupMap;\n};\n\nexport type TAzureConfigValidationResult = TValidatedAzureConfig & {\n  isValid: boolean;\n  errors: (ZodError | string)[];\n};\n\nexport enum Capabilities {\n  code_interpreter = 'code_interpreter',\n  image_vision = 'image_vision',\n  retrieval = 'retrieval',\n  actions = 'actions',\n  tools = 'tools',\n}\n\nexport enum AgentCapabilities {\n  hide_sequential_outputs = 'hide_sequential_outputs',\n  end_after_tools = 'end_after_tools',\n  execute_code = 'execute_code',\n  file_search = 'file_search',\n  web_search = 'web_search',\n  artifacts = 'artifacts',\n  actions = 'actions',\n  tools = 'tools',\n  chain = 'chain',\n  ocr = 'ocr',\n}\n\nexport const defaultAssistantsVersion = {\n  [EModelEndpoint.assistants]: 2,\n  [EModelEndpoint.azureAssistants]: 1,\n};\n\nexport const baseEndpointSchema = z.object({\n  streamRate: z.number().optional(),\n  baseURL: z.string().optional(),\n  titlePrompt: z.string().optional(),\n  titleModel: z.string().optional(),\n});\n\nexport type TBaseEndpoint = z.infer<typeof baseEndpointSchema>;\n\nexport const bedrockEndpointSchema = baseEndpointSchema.merge(\n  z.object({\n    availableRegions: z.array(z.string()).optional(),\n  }),\n);\n\nexport const assistantEndpointSchema = baseEndpointSchema.merge(\n  z.object({\n    /* assistants specific */\n    disableBuilder: z.boolean().optional(),\n    pollIntervalMs: z.number().optional(),\n    timeoutMs: z.number().optional(),\n    version: z.union([z.string(), z.number()]).default(2),\n    supportedIds: z.array(z.string()).min(1).optional(),\n    excludedIds: z.array(z.string()).min(1).optional(),\n    privateAssistants: z.boolean().optional(),\n    retrievalModels: z.array(z.string()).min(1).optional().default(defaultRetrievalModels),\n    capabilities: z\n      .array(z.nativeEnum(Capabilities))\n      .optional()\n      .default([\n        Capabilities.code_interpreter,\n        Capabilities.image_vision,\n        Capabilities.retrieval,\n        Capabilities.actions,\n        Capabilities.tools,\n      ]),\n    /* general */\n    apiKey: z.string().optional(),\n    models: z\n      .object({\n        default: z.array(z.string()).min(1),\n        fetch: z.boolean().optional(),\n        userIdQuery: z.boolean().optional(),\n      })\n      .optional(),\n    titleConvo: z.boolean().optional(),\n    titleMethod: z.union([z.literal('completion'), z.literal('functions')]).optional(),\n    headers: z.record(z.any()).optional(),\n  }),\n);\n\nexport type TAssistantEndpoint = z.infer<typeof assistantEndpointSchema>;\n\nexport const defaultAgentCapabilities = [\n  AgentCapabilities.execute_code,\n  AgentCapabilities.file_search,\n  AgentCapabilities.web_search,\n  AgentCapabilities.artifacts,\n  AgentCapabilities.actions,\n  AgentCapabilities.tools,\n  AgentCapabilities.chain,\n  AgentCapabilities.ocr,\n];\n\nexport const agentsEndpointSchema = baseEndpointSchema\n  .merge(\n    z.object({\n      /* agents specific */\n      recursionLimit: z.number().optional(),\n      disableBuilder: z.boolean().optional().default(false),\n      maxRecursionLimit: z.number().optional(),\n      allowedProviders: z.array(z.union([z.string(), eModelEndpointSchema])).optional(),\n      capabilities: z\n        .array(z.nativeEnum(AgentCapabilities))\n        .optional()\n        .default(defaultAgentCapabilities),\n    }),\n  )\n  .default({\n    disableBuilder: false,\n    capabilities: defaultAgentCapabilities,\n  });\n\nexport type TAgentsEndpoint = z.infer<typeof agentsEndpointSchema>;\n\nexport const endpointSchema = baseEndpointSchema.merge(\n  z.object({\n    name: z.string().refine((value) => !eModelEndpointSchema.safeParse(value).success, {\n      message: `Value cannot be one of the default endpoint (EModelEndpoint) values: ${Object.values(\n        EModelEndpoint,\n      ).join(', ')}`,\n    }),\n    apiKey: z.string(),\n    baseURL: z.string(),\n    models: z.object({\n      default: z.array(z.string()).min(1),\n      fetch: z.boolean().optional(),\n      userIdQuery: z.boolean().optional(),\n    }),\n    titleConvo: z.boolean().optional(),\n    titleMethod: z.union([z.literal('completion'), z.literal('functions')]).optional(),\n    summarize: z.boolean().optional(),\n    summaryModel: z.string().optional(),\n    forcePrompt: z.boolean().optional(),\n    modelDisplayLabel: z.string().optional(),\n    headers: z.record(z.any()).optional(),\n    addParams: z.record(z.any()).optional(),\n    dropParams: z.array(z.string()).optional(),\n    customParams: z\n      .object({\n        defaultParamsEndpoint: z.string().default('custom'),\n        paramDefinitions: z.array(z.record(z.any())).optional(),\n      })\n      .strict(),\n    customOrder: z.number().optional(),\n    directEndpoint: z.boolean().optional(),\n    titleMessageRole: z.string().optional(),\n  }),\n);\n\nexport type TEndpoint = z.infer<typeof endpointSchema>;\n\nexport const azureEndpointSchema = z\n  .object({\n    groups: azureGroupConfigsSchema,\n    plugins: z.boolean().optional(),\n    assistants: z.boolean().optional(),\n  })\n  .and(\n    endpointSchema\n      .pick({\n        streamRate: true,\n        titleConvo: true,\n        titleMethod: true,\n        titleModel: true,\n        summarize: true,\n        summaryModel: true,\n        customOrder: true,\n      })\n      .partial(),\n  );\n\nexport type TAzureConfig = Omit<z.infer<typeof azureEndpointSchema>, 'groups'> &\n  TAzureConfigValidationResult;\n\nconst ttsOpenaiSchema = z.object({\n  url: z.string().optional(),\n  apiKey: z.string(),\n  model: z.string(),\n  voices: z.array(z.string()),\n});\n\nconst ttsAzureOpenAISchema = z.object({\n  instanceName: z.string(),\n  apiKey: z.string(),\n  deploymentName: z.string(),\n  apiVersion: z.string(),\n  model: z.string(),\n  voices: z.array(z.string()),\n});\n\nconst ttsElevenLabsSchema = z.object({\n  url: z.string().optional(),\n  websocketUrl: z.string().optional(),\n  apiKey: z.string(),\n  model: z.string(),\n  voices: z.array(z.string()),\n  voice_settings: z\n    .object({\n      similarity_boost: z.number().optional(),\n      stability: z.number().optional(),\n      style: z.number().optional(),\n      use_speaker_boost: z.boolean().optional(),\n    })\n    .optional(),\n  pronunciation_dictionary_locators: z.array(z.string()).optional(),\n});\n\nconst ttsLocalaiSchema = z.object({\n  url: z.string(),\n  apiKey: z.string().optional(),\n  voices: z.array(z.string()),\n  backend: z.string(),\n});\n\nconst ttsSchema = z.object({\n  openai: ttsOpenaiSchema.optional(),\n  azureOpenAI: ttsAzureOpenAISchema.optional(),\n  elevenlabs: ttsElevenLabsSchema.optional(),\n  localai: ttsLocalaiSchema.optional(),\n});\n\nconst sttOpenaiSchema = z.object({\n  url: z.string().optional(),\n  apiKey: z.string(),\n  model: z.string(),\n});\n\nconst sttAzureOpenAISchema = z.object({\n  instanceName: z.string(),\n  apiKey: z.string(),\n  deploymentName: z.string(),\n  apiVersion: z.string(),\n});\n\nconst sttSchema = z.object({\n  openai: sttOpenaiSchema.optional(),\n  azureOpenAI: sttAzureOpenAISchema.optional(),\n});\n\nconst speechTab = z\n  .object({\n    conversationMode: z.boolean().optional(),\n    advancedMode: z.boolean().optional(),\n    speechToText: z\n      .boolean()\n      .optional()\n      .or(\n        z.object({\n          engineSTT: z.string().optional(),\n          languageSTT: z.string().optional(),\n          autoTranscribeAudio: z.boolean().optional(),\n          decibelValue: z.number().optional(),\n          autoSendText: z.number().optional(),\n        }),\n      )\n      .optional(),\n    textToSpeech: z\n      .boolean()\n      .optional()\n      .or(\n        z.object({\n          engineTTS: z.string().optional(),\n          voice: z.string().optional(),\n          languageTTS: z.string().optional(),\n          automaticPlayback: z.boolean().optional(),\n          playbackRate: z.number().optional(),\n          cacheTTS: z.boolean().optional(),\n        }),\n      )\n      .optional(),\n  })\n  .optional();\n\nexport enum RateLimitPrefix {\n  FILE_UPLOAD = 'FILE_UPLOAD',\n  IMPORT = 'IMPORT',\n  TTS = 'TTS',\n  STT = 'STT',\n}\n\nexport const rateLimitSchema = z.object({\n  fileUploads: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n  conversationsImport: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n  tts: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n  stt: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n});\n\nexport enum EImageOutputType {\n  PNG = 'png',\n  WEBP = 'webp',\n  JPEG = 'jpeg',\n}\n\nconst termsOfServiceSchema = z.object({\n  externalUrl: z.string().optional(),\n  openNewTab: z.boolean().optional(),\n  modalAcceptance: z.boolean().optional(),\n  modalTitle: z.string().optional(),\n  modalContent: z.string().or(z.array(z.string())).optional(),\n});\n\nexport type TTermsOfService = z.infer<typeof termsOfServiceSchema>;\n\nconst mcpServersSchema = z.object({\n  placeholder: z.string().optional(),\n});\n\nexport type TMcpServersConfig = z.infer<typeof mcpServersSchema>;\n\nexport const intefaceSchema = z\n  .object({\n    privacyPolicy: z\n      .object({\n        externalUrl: z.string().optional(),\n        openNewTab: z.boolean().optional(),\n      })\n      .optional(),\n    termsOfService: termsOfServiceSchema.optional(),\n    customWelcome: z.string().optional(),\n    mcpServers: mcpServersSchema.optional(),\n    endpointsMenu: z.boolean().optional(),\n    modelSelect: z.boolean().optional(),\n    parameters: z.boolean().optional(),\n    sidePanel: z.boolean().optional(),\n    multiConvo: z.boolean().optional(),\n    bookmarks: z.boolean().optional(),\n    memories: z.boolean().optional(),\n    presets: z.boolean().optional(),\n    prompts: z.boolean().optional(),\n    agents: z.boolean().optional(),\n    temporaryChat: z.boolean().optional(),\n    temporaryChatRetention: z.number().min(1).max(8760).optional(),\n    runCode: z.boolean().optional(),\n    webSearch: z.boolean().optional(),\n  })\n  .default({\n    endpointsMenu: true,\n    modelSelect: true,\n    parameters: true,\n    sidePanel: true,\n    presets: true,\n    multiConvo: true,\n    bookmarks: true,\n    memories: true,\n    prompts: true,\n    agents: true,\n    temporaryChat: true,\n    runCode: true,\n    webSearch: true,\n  });\n\nexport type TInterfaceConfig = z.infer<typeof intefaceSchema>;\nexport type TBalanceConfig = z.infer<typeof balanceSchema>;\n\nexport const turnstileOptionsSchema = z\n  .object({\n    language: z.string().default('auto'),\n    size: z.enum(['normal', 'compact', 'flexible', 'invisible']).default('normal'),\n  })\n  .default({\n    language: 'auto',\n    size: 'normal',\n  });\n\nexport const turnstileSchema = z.object({\n  siteKey: z.string(),\n  options: turnstileOptionsSchema.optional(),\n});\n\nexport type TTurnstileConfig = z.infer<typeof turnstileSchema>;\n\nexport type TStartupConfig = {\n  appTitle: string;\n  socialLogins?: string[];\n  interface?: TInterfaceConfig;\n  turnstile?: TTurnstileConfig;\n  balance?: TBalanceConfig;\n  discordLoginEnabled: boolean;\n  facebookLoginEnabled: boolean;\n  githubLoginEnabled: boolean;\n  googleLoginEnabled: boolean;\n  openidLoginEnabled: boolean;\n  appleLoginEnabled: boolean;\n  samlLoginEnabled: boolean;\n  openidLabel: string;\n  openidImageUrl: string;\n  openidAutoRedirect: boolean;\n  samlLabel: string;\n  samlImageUrl: string;\n  /** LDAP Auth Configuration */\n  ldap?: {\n    /** LDAP enabled */\n    enabled: boolean;\n    /** Whether LDAP uses username vs. email */\n    username?: boolean;\n  };\n  serverDomain: string;\n  emailLoginEnabled: boolean;\n  registrationEnabled: boolean;\n  socialLoginEnabled: boolean;\n  passwordResetEnabled: boolean;\n  emailEnabled: boolean;\n  showBirthdayIcon: boolean;\n  helpAndFaqURL: string;\n  customFooter?: string;\n  modelSpecs?: TSpecsConfig;\n  sharedLinksEnabled: boolean;\n  publicSharedLinksEnabled: boolean;\n  analyticsGtmId?: string;\n  instanceProjectId: string;\n  bundlerURL?: string;\n  staticBundlerURL?: string;\n  webSearch?: {\n    searchProvider?: SearchProviders;\n    scraperType?: ScraperTypes;\n    rerankerType?: RerankerTypes;\n  };\n  mcpServers?: Record<\n    string,\n    {\n      customUserVars: Record<\n        string,\n        {\n          title: string;\n          description: string;\n        }\n      >;\n    }\n  >;\n  mcpPlaceholder?: string;\n};\n\nexport enum OCRStrategy {\n  MISTRAL_OCR = 'mistral_ocr',\n  CUSTOM_OCR = 'custom_ocr',\n  AZURE_MISTRAL_OCR = 'azure_mistral_ocr',\n}\n\nexport enum SearchCategories {\n  PROVIDERS = 'providers',\n  SCRAPERS = 'scrapers',\n  RERANKERS = 'rerankers',\n}\n\nexport enum SearchProviders {\n  SERPER = 'serper',\n  SEARXNG = 'searxng',\n}\n\nexport enum ScraperTypes {\n  FIRECRAWL = 'firecrawl',\n  SERPER = 'serper',\n}\n\nexport enum RerankerTypes {\n  JINA = 'jina',\n  COHERE = 'cohere',\n}\n\nexport enum SafeSearchTypes {\n  OFF = 0,\n  MODERATE = 1,\n  STRICT = 2,\n}\n\nexport const webSearchSchema = z.object({\n  serperApiKey: z.string().optional().default('${SERPER_API_KEY}'),\n  firecrawlApiKey: z.string().optional().default('${FIRECRAWL_API_KEY}'),\n  firecrawlApiUrl: z.string().optional().default('${FIRECRAWL_API_URL}'),\n  jinaApiKey: z.string().optional().default('${JINA_API_KEY}'),\n  cohereApiKey: z.string().optional().default('${COHERE_API_KEY}'),\n  searchProvider: z.nativeEnum(SearchProviders).optional(),\n  scraperType: z.nativeEnum(ScraperTypes).optional(),\n  rerankerType: z.nativeEnum(RerankerTypes).optional(),\n  scraperTimeout: z.number().optional(),\n  safeSearch: z.nativeEnum(SafeSearchTypes).default(SafeSearchTypes.MODERATE),\n});\n\nexport type TWebSearchConfig = z.infer<typeof webSearchSchema>;\n\nexport const ocrSchema = z.object({\n  mistralModel: z.string().optional(),\n  apiKey: z.string().optional().default('${OCR_API_KEY}'),\n  baseURL: z.string().optional().default('${OCR_BASEURL}'),\n  strategy: z.nativeEnum(OCRStrategy).default(OCRStrategy.MISTRAL_OCR),\n});\n\nexport const balanceSchema = z.object({\n  enabled: z.boolean().optional().default(false),\n  startBalance: z.number().optional().default(20000),\n  autoRefillEnabled: z.boolean().optional().default(false),\n  refillIntervalValue: z.number().optional().default(30),\n  refillIntervalUnit: z\n    .enum(['seconds', 'minutes', 'hours', 'days', 'weeks', 'months'])\n    .optional()\n    .default('days'),\n  refillAmount: z.number().optional().default(10000),\n});\n\nexport const memorySchema = z.object({\n  disabled: z.boolean().optional(),\n  validKeys: z.array(z.string()).optional(),\n  tokenLimit: z.number().optional(),\n  personalize: z.boolean().default(true),\n  messageWindowSize: z.number().optional().default(5),\n  agent: z\n    .union([\n      z.object({\n        id: z.string(),\n      }),\n      z.object({\n        provider: z.string(),\n        model: z.string(),\n        instructions: z.string().optional(),\n        model_parameters: z.record(z.any()).optional(),\n      }),\n    ])\n    .optional(),\n});\n\nexport type TMemoryConfig = z.infer<typeof memorySchema>;\n\nexport const configSchema = z.object({\n  version: z.string(),\n  cache: z.boolean().default(true),\n  ocr: ocrSchema.optional(),\n  webSearch: webSearchSchema.optional(),\n  memory: memorySchema.optional(),\n  secureImageLinks: z.boolean().optional(),\n  imageOutputType: z.nativeEnum(EImageOutputType).default(EImageOutputType.PNG),\n  includedTools: z.array(z.string()).optional(),\n  filteredTools: z.array(z.string()).optional(),\n  mcpServers: MCPServersSchema.optional(),\n  interface: intefaceSchema,\n  turnstile: turnstileSchema.optional(),\n  fileStrategy: fileSourceSchema.default(FileSources.local),\n  actions: z\n    .object({\n      allowedDomains: z.array(z.string()).optional(),\n    })\n    .optional(),\n  registration: z\n    .object({\n      socialLogins: z.array(z.string()).optional(),\n      allowedDomains: z.array(z.string()).optional(),\n    })\n    .default({ socialLogins: defaultSocialLogins }),\n  balance: balanceSchema.optional(),\n  speech: z\n    .object({\n      tts: ttsSchema.optional(),\n      stt: sttSchema.optional(),\n      speechTab: speechTab.optional(),\n    })\n    .optional(),\n  rateLimits: rateLimitSchema.optional(),\n  fileConfig: fileConfigSchema.optional(),\n  modelSpecs: specsConfigSchema.optional(),\n  endpoints: z\n    .object({\n      all: baseEndpointSchema.optional(),\n      [EModelEndpoint.openAI]: baseEndpointSchema.optional(),\n      [EModelEndpoint.google]: baseEndpointSchema.optional(),\n      [EModelEndpoint.anthropic]: baseEndpointSchema.optional(),\n      [EModelEndpoint.gptPlugins]: baseEndpointSchema.optional(),\n      [EModelEndpoint.azureOpenAI]: azureEndpointSchema.optional(),\n      [EModelEndpoint.azureAssistants]: assistantEndpointSchema.optional(),\n      [EModelEndpoint.assistants]: assistantEndpointSchema.optional(),\n      [EModelEndpoint.agents]: agentsEndpointSchema.optional(),\n      [EModelEndpoint.custom]: z.array(endpointSchema.partial()).optional(),\n      [EModelEndpoint.bedrock]: baseEndpointSchema.optional(),\n    })\n    .strict()\n    .refine((data) => Object.keys(data).length > 0, {\n      message: 'At least one `endpoints` field must be provided.',\n    })\n    .optional(),\n});\n\nexport const getConfigDefaults = () => getSchemaDefaults(configSchema);\n\nexport type TCustomConfig = z.infer<typeof configSchema>;\n\nexport type TProviderSchema =\n  | z.infer<typeof ttsOpenaiSchema>\n  | z.infer<typeof ttsElevenLabsSchema>\n  | z.infer<typeof ttsLocalaiSchema>\n  | undefined;\n\nexport enum KnownEndpoints {\n  anyscale = 'anyscale',\n  apipie = 'apipie',\n  cohere = 'cohere',\n  fireworks = 'fireworks',\n  deepseek = 'deepseek',\n  groq = 'groq',\n  huggingface = 'huggingface',\n  mistral = 'mistral',\n  mlx = 'mlx',\n  ollama = 'ollama',\n  openrouter = 'openrouter',\n  perplexity = 'perplexity',\n  shuttleai = 'shuttleai',\n  'together.ai' = 'together.ai',\n  unify = 'unify',\n  xai = 'xai',\n}\n\nexport enum FetchTokenConfig {\n  openrouter = KnownEndpoints.openrouter,\n}\n\nexport const defaultEndpoints: EModelEndpoint[] = [\n  EModelEndpoint.openAI,\n  EModelEndpoint.assistants,\n  EModelEndpoint.azureAssistants,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.agents,\n  EModelEndpoint.chatGPTBrowser,\n  EModelEndpoint.gptPlugins,\n  EModelEndpoint.google,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.custom,\n  EModelEndpoint.bedrock,\n];\n\nexport const alternateName = {\n  [EModelEndpoint.openAI]: 'OpenAI',\n  [EModelEndpoint.assistants]: 'Assistants',\n  [EModelEndpoint.agents]: 'Agents',\n  [EModelEndpoint.azureAssistants]: 'Azure Assistants',\n  [EModelEndpoint.azureOpenAI]: 'Azure OpenAI',\n  [EModelEndpoint.chatGPTBrowser]: 'ChatGPT',\n  [EModelEndpoint.gptPlugins]: 'Plugins',\n  [EModelEndpoint.google]: 'Google',\n  [EModelEndpoint.anthropic]: 'Anthropic',\n  [EModelEndpoint.custom]: 'Custom',\n  [EModelEndpoint.bedrock]: 'AWS Bedrock',\n  [KnownEndpoints.ollama]: 'Ollama',\n  [KnownEndpoints.deepseek]: 'DeepSeek',\n  [KnownEndpoints.xai]: 'xAI',\n};\n\nconst sharedOpenAIModels = [\n  'gpt-4o-mini',\n  'gpt-4o',\n  'gpt-4.5-preview',\n  'gpt-4.5-preview-2025-02-27',\n  'gpt-3.5-turbo',\n  'gpt-3.5-turbo-0125',\n  'gpt-4-turbo',\n  'gpt-4-turbo-2024-04-09',\n  'gpt-4-0125-preview',\n  'gpt-4-turbo-preview',\n  'gpt-4-1106-preview',\n  'gpt-3.5-turbo-1106',\n  'gpt-3.5-turbo-16k-0613',\n  'gpt-3.5-turbo-16k',\n  'gpt-4',\n  'gpt-4-0314',\n  'gpt-4-32k-0314',\n  'gpt-4-0613',\n  'gpt-3.5-turbo-0613',\n];\n\nconst sharedAnthropicModels = ['model-1', 'model-2'];\n\nexport const bedrockModels = [\n  'anthropic.claude-3-5-sonnet-20241022-v2:0',\n  'anthropic.claude-3-5-sonnet-20240620-v1:0',\n  'anthropic.claude-3-5-haiku-20241022-v1:0',\n  'anthropic.claude-3-haiku-20240307-v1:0',\n  'anthropic.claude-3-opus-20240229-v1:0',\n  'anthropic.claude-3-sonnet-20240229-v1:0',\n  'anthropic.claude-v2',\n  'anthropic.claude-v2:1',\n  'anthropic.claude-instant-v1',\n  // 'cohere.command-text-v14', // no conversation history\n  // 'cohere.command-light-text-v14', // no conversation history\n  'cohere.command-r-v1:0',\n  'cohere.command-r-plus-v1:0',\n  'meta.llama2-13b-chat-v1',\n  'meta.llama2-70b-chat-v1',\n  'meta.llama3-8b-instruct-v1:0',\n  'meta.llama3-70b-instruct-v1:0',\n  'meta.llama3-1-8b-instruct-v1:0',\n  'meta.llama3-1-70b-instruct-v1:0',\n  'meta.llama3-1-405b-instruct-v1:0',\n  'mistral.mistral-7b-instruct-v0:2',\n  'mistral.mixtral-8x7b-instruct-v0:1',\n  'mistral.mistral-large-2402-v1:0',\n  'mistral.mistral-large-2407-v1:0',\n  'mistral.mistral-small-2402-v1:0',\n  'ai21.jamba-instruct-v1:0',\n  // 'ai21.j2-mid-v1', // no streaming\n  // 'ai21.j2-ultra-v1', no conversation history\n  'amazon.titan-text-lite-v1',\n  'amazon.titan-text-express-v1',\n  'amazon.titan-text-premier-v1:0',\n];\n\nexport const defaultModels = {\n  [EModelEndpoint.azureAssistants]: sharedOpenAIModels,\n  [EModelEndpoint.assistants]: [...sharedOpenAIModels, 'chatgpt-4o-latest'],\n  [EModelEndpoint.agents]: sharedOpenAIModels, // TODO: Add agent models (agentsModels)\n  [EModelEndpoint.google]: [\n    // Gemini 2.0 Models\n    'gemini-2.0-flash-001',\n    'gemini-2.0-flash-exp',\n    'gemini-2.0-flash-lite',\n    'gemini-2.0-pro-exp-02-05',\n    // Gemini 1.5 Models\n    'gemini-1.5-flash-001',\n    'gemini-1.5-flash-002',\n    'gemini-1.5-pro-001',\n    'gemini-1.5-pro-002',\n    // Gemini 1.0 Models\n    'gemini-1.0-pro-001',\n  ],\n  [EModelEndpoint.anthropic]: sharedAnthropicModels,\n  [EModelEndpoint.openAI]: [\n    ...sharedOpenAIModels,\n    'chatgpt-4o-latest',\n    'gpt-4-vision-preview',\n    'gpt-3.5-turbo-instruct-0914',\n    'gpt-3.5-turbo-instruct',\n  ],\n  [EModelEndpoint.bedrock]: bedrockModels,\n};\n\nconst fitlerAssistantModels = (str: string) => {\n  return /gpt-4|gpt-3\\\\.5/i.test(str) && !/vision|instruct/i.test(str);\n};\n\nconst openAIModels = defaultModels[EModelEndpoint.openAI];\n\nexport const initialModelsConfig: TModelsConfig = {\n  initial: [],\n  [EModelEndpoint.openAI]: openAIModels,\n  [EModelEndpoint.assistants]: openAIModels.filter(fitlerAssistantModels),\n  [EModelEndpoint.agents]: openAIModels, // TODO: Add agent models (agentsModels)\n  [EModelEndpoint.gptPlugins]: openAIModels,\n  [EModelEndpoint.azureOpenAI]: openAIModels,\n  [EModelEndpoint.chatGPTBrowser]: ['text-davinci-002-render-sha'],\n  [EModelEndpoint.google]: defaultModels[EModelEndpoint.google],\n  [EModelEndpoint.anthropic]: defaultModels[EModelEndpoint.anthropic],\n  [EModelEndpoint.bedrock]: defaultModels[EModelEndpoint.bedrock],\n};\n\nexport const EndpointURLs: Record<string, string> = {\n  [EModelEndpoint.assistants]: '/api/assistants/v2/chat',\n  [EModelEndpoint.azureAssistants]: '/api/assistants/v1/chat',\n  [EModelEndpoint.agents]: `/api/${EModelEndpoint.agents}/chat`,\n};\n\nexport const modularEndpoints = new Set<EModelEndpoint | string>([\n  EModelEndpoint.gptPlugins,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.google,\n  EModelEndpoint.openAI,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.custom,\n  EModelEndpoint.agents,\n  EModelEndpoint.bedrock,\n]);\n\nexport const supportsBalanceCheck = {\n  [EModelEndpoint.custom]: true,\n  [EModelEndpoint.openAI]: true,\n  [EModelEndpoint.anthropic]: true,\n  [EModelEndpoint.gptPlugins]: true,\n  [EModelEndpoint.assistants]: true,\n  [EModelEndpoint.agents]: true,\n  [EModelEndpoint.azureAssistants]: true,\n  [EModelEndpoint.azureOpenAI]: true,\n  [EModelEndpoint.bedrock]: true,\n};\n\nexport const visionModels = [\n  'qwen-vl',\n  'grok-vision',\n  'grok-2-vision',\n  'grok-3',\n  'gpt-4o-mini',\n  'gpt-4o',\n  'gpt-4-turbo',\n  'gpt-4-vision',\n  'o4-mini',\n  'o3',\n  'o1',\n  'gpt-4.1',\n  'gpt-4.5',\n  'llava',\n  'llava-13b',\n  'gemini-pro-vision',\n  'claude-3',\n  'gemma',\n  'gemini-exp',\n  'gemini-1.5',\n  'gemini-2',\n  'gemini-3',\n  'moondream',\n  'llama3.2-vision',\n  'llama-3.2-11b-vision',\n  'llama-3-2-11b-vision',\n  'llama-3.2-90b-vision',\n  'llama-3-2-90b-vision',\n  'llama-4',\n  'claude-opus-4',\n  'claude-sonnet-4',\n  'claude-haiku-4',\n];\nexport enum VisionModes {\n  generative = 'generative',\n  agents = 'agents',\n}\n\nexport function validateVisionModel({\n  model,\n  additionalModels = [],\n  availableModels,\n}: {\n  model: string;\n  additionalModels?: string[];\n  availableModels?: string[];\n}) {\n  if (!model) {\n    return false;\n  }\n\n  if (model.includes('gpt-4-turbo-preview') || model.includes('o1-mini')) {\n    return false;\n  }\n\n  if (availableModels && !availableModels.includes(model)) {\n    return false;\n  }\n\n  return visionModels.concat(additionalModels).some((visionModel) => model.includes(visionModel));\n}\n\nexport const imageGenTools = new Set(['dalle', 'dall-e', 'stable-diffusion', 'flux']);\n\n/**\n * Enum for collections using infinite queries\n */\nexport enum InfiniteCollections {\n  /**\n   * Collection for Prompt Groups\n   */\n  PROMPT_GROUPS = 'promptGroups',\n  /**\n   * Collection for Shared Links\n   */\n  SHARED_LINKS = 'sharedLinks',\n}\n\n/**\n * Enum for time intervals\n */\nexport enum Time {\n  ONE_HOUR = 3600000,\n  THIRTY_MINUTES = 1800000,\n  TEN_MINUTES = 600000,\n  FIVE_MINUTES = 300000,\n  TWO_MINUTES = 120000,\n  ONE_MINUTE = 60000,\n  THIRTY_SECONDS = 30000,\n}\n\n/**\n * Enum for cache keys.\n */\nexport enum CacheKeys {\n  /**\n   * Key for the config store namespace.\n   */\n  CONFIG_STORE = 'configStore',\n  /**\n   * Key for the config store namespace.\n   */\n  ROLES = 'roles',\n  /**\n   * Key for the plugins cache.\n   */\n  PLUGINS = 'plugins',\n  /**\n   * Key for the title generation cache.\n   */\n  GEN_TITLE = 'genTitle',\n  /**\n  /**\n   * Key for the tools cache.\n   */\n  TOOLS = 'tools',\n  /**\n   * Key for the model config cache.\n   */\n  MODELS_CONFIG = 'modelsConfig',\n  /**\n   * Key for the model queries cache.\n   */\n  MODEL_QUERIES = 'modelQueries',\n  /**\n   * Key for the default startup config cache.\n   */\n  STARTUP_CONFIG = 'startupConfig',\n  /**\n   * Key for the default endpoint config cache.\n   */\n  ENDPOINT_CONFIG = 'endpointsConfig',\n  /**\n   * Key for accessing the model token config cache.\n   */\n  TOKEN_CONFIG = 'tokenConfig',\n  /**\n   * Key for the custom config cache.\n   */\n  CUSTOM_CONFIG = 'customConfig',\n  /**\n   * Key for accessing Abort Keys\n   */\n  ABORT_KEYS = 'abortKeys',\n  /**\n   * Key for the override config cache.\n   */\n  OVERRIDE_CONFIG = 'overrideConfig',\n  /**\n   * Key for the bans cache.\n   */\n  BANS = 'bans',\n  /**\n   * Key for the encoded domains cache.\n   * Used by Azure OpenAI Assistants.\n   */\n  ENCODED_DOMAINS = 'encoded_domains',\n  /**\n   * Key for the cached audio run Ids.\n   */\n  AUDIO_RUNS = 'audioRuns',\n  /**\n   * Key for in-progress messages.\n   */\n  MESSAGES = 'messages',\n  /**\n   * Key for in-progress flow states.\n   */\n  FLOWS = 'flows',\n  /**\n   * Key for individual MCP Tool Manifests.\n   */\n  MCP_TOOLS = 'mcp_tools',\n  /**\n   * Key for pending chat requests (concurrency check)\n   */\n  PENDING_REQ = 'pending_req',\n  /**\n   * Key for s3 check intervals per user\n   */\n  S3_EXPIRY_INTERVAL = 'S3_EXPIRY_INTERVAL',\n  /**\n   * key for open id exchanged tokens\n   */\n  OPENID_EXCHANGED_TOKENS = 'OPENID_EXCHANGED_TOKENS',\n}\n\n/**\n * Enum for violation types, used to identify, log, and cache violations.\n */\nexport enum ViolationTypes {\n  /**\n   * File Upload Violations (exceeding limit).\n   */\n  FILE_UPLOAD_LIMIT = 'file_upload_limit',\n  /**\n   * Illegal Model Request (not available).\n   */\n  ILLEGAL_MODEL_REQUEST = 'illegal_model_request',\n  /**\n   * Token Limit Violation.\n   */\n  TOKEN_BALANCE = 'token_balance',\n  /**\n   * An issued ban.\n   */\n  BAN = 'ban',\n  /**\n   * TTS Request Limit Violation.\n   */\n  TTS_LIMIT = 'tts_limit',\n  /**\n   * STT Request Limit Violation.\n   */\n  STT_LIMIT = 'stt_limit',\n  /**\n   * Reset Password Limit Violation.\n   */\n  RESET_PASSWORD_LIMIT = 'reset_password_limit',\n  /**\n   * Verify Email Limit Violation.\n   */\n  VERIFY_EMAIL_LIMIT = 'verify_email_limit',\n  /**\n   * Verify Conversation Access violation.\n   */\n  CONVO_ACCESS = 'convo_access',\n  /**\n   * Tool Call Limit Violation.\n   */\n  TOOL_CALL_LIMIT = 'tool_call_limit',\n}\n\n/**\n * Enum for error message types that are not \"violations\" as above, used to identify client-facing errors.\n */\nexport enum ErrorTypes {\n  /**\n   * No User-provided Key.\n   */\n  NO_USER_KEY = 'no_user_key',\n  /**\n   * Expired User-provided Key.\n   */\n  EXPIRED_USER_KEY = 'expired_user_key',\n  /**\n   * Invalid User-provided Key.\n   */\n  INVALID_USER_KEY = 'invalid_user_key',\n  /**\n   * No Base URL Provided.\n   */\n  NO_BASE_URL = 'no_base_url',\n  /**\n   * Moderation error\n   */\n  MODERATION = 'moderation',\n  /**\n   * Prompt exceeds max length\n   */\n  INPUT_LENGTH = 'INPUT_LENGTH',\n  /**\n   * Invalid request error, API rejected request\n   */\n  INVALID_REQUEST = 'invalid_request_error',\n  /**\n   * Invalid action request error, likely not on list of allowed domains\n   */\n  INVALID_ACTION = 'invalid_action_error',\n  /**\n   * Invalid request error, API rejected request\n   */\n  NO_SYSTEM_MESSAGES = 'no_system_messages',\n  /**\n   * Google provider returned an error\n   */\n  GOOGLE_ERROR = 'google_error',\n  /**\n   * Invalid Agent Provider (excluded by Admin)\n   */\n  INVALID_AGENT_PROVIDER = 'invalid_agent_provider',\n}\n\n/**\n * Enum for authentication keys.\n */\nexport enum AuthKeys {\n  /**\n   * Key for the Service Account to use Vertex AI.\n   */\n  GOOGLE_SERVICE_KEY = 'GOOGLE_SERVICE_KEY',\n  /**\n   * API key to use Google Generative AI.\n   *\n   * Note: this is not for Environment Variables, but to access encrypted object values.\n   */\n  GOOGLE_API_KEY = 'GOOGLE_API_KEY',\n}\n\n/**\n * Enum for Image Detail Cost.\n *\n * **Low Res Fixed Cost:** `85`\n *\n * **High Res Calculation:**\n *\n * Number of `512px` Tiles * `170` + `85` (Additional Cost)\n */\nexport enum ImageDetailCost {\n  /**\n   * Low resolution is a fixed value.\n   */\n  LOW = 85,\n  /**\n   * High resolution Cost Per Tile\n   */\n  HIGH = 170,\n  /**\n   * Additional Cost added to High Resolution Total Cost\n   */\n  // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values\n  ADDITIONAL = 85,\n}\n\n/**\n * Tab values for Settings Dialog\n */\nexport enum SettingsTabValues {\n  /**\n   * Tab for General Settings\n   */\n  GENERAL = 'general',\n  /**\n   * Tab for Chat Settings\n   */\n  CHAT = 'chat',\n  /**\n   * Tab for Speech Settings\n   */\n  SPEECH = 'speech',\n  /**\n   * Tab for Beta Features\n   */\n  BETA = 'beta',\n  /**\n   * Tab for Data Controls\n   */\n  DATA = 'data',\n  /**\n   * Tab for Balance Settings\n   */\n  BALANCE = 'balance',\n  /**\n   * Tab for Account Settings\n   */\n  ACCOUNT = 'account',\n  /**\n   * Chat input commands\n   */\n  COMMANDS = 'commands',\n  /**\n   * Tab for Personalization Settings\n   */\n  PERSONALIZATION = 'personalization',\n}\n\nexport enum STTProviders {\n  /**\n   * Provider for OpenAI STT\n   */\n  OPENAI = 'openai',\n  /**\n   * Provider for Microsoft Azure STT\n   */\n  AZURE_OPENAI = 'azureOpenAI',\n}\n\nexport enum TTSProviders {\n  /**\n   * Provider for OpenAI TTS\n   */\n  OPENAI = 'openai',\n  /**\n   * Provider for Microsoft Azure OpenAI TTS\n   */\n  AZURE_OPENAI = 'azureOpenAI',\n  /**\n   * Provider for ElevenLabs TTS\n   */\n  ELEVENLABS = 'elevenlabs',\n  /**\n   * Provider for LocalAI TTS\n   */\n  LOCALAI = 'localai',\n}\n\n/** Enum for app-wide constants */\nexport enum Constants {\n  /** Key for the app's version. */\n  VERSION = 'v0.7.8',\n  /** Key for the Custom Config's version (chat.yaml). */\n  CONFIG_VERSION = '1.2.8',\n  /** Standard value for the first message's `parentMessageId` value, to indicate no parent exists. */\n  NO_PARENT = '00000000-0000-0000-0000-000000000000',\n  /** Standard value for the initial conversationId before a request is sent */\n  NEW_CONVO = 'new',\n  /** Standard value for the temporary conversationId after a request is sent and before the server responds */\n  PENDING_CONVO = 'PENDING',\n  /** Standard value for the conversationId used for search queries */\n  SEARCH = 'search',\n  /** Fixed, encoded domain length for Azure OpenAI Assistants Function name parsing. */\n  ENCODED_DOMAIN_LENGTH = 10,\n  /** Identifier for using current_model in multi-model requests. */\n  CURRENT_MODEL = 'current_model',\n  /** Common divider for text values */\n  COMMON_DIVIDER = '__',\n  /** Max length for commands */\n  COMMANDS_MAX_LENGTH = 56,\n  /** Default Stream Rate (ms) */\n  DEFAULT_STREAM_RATE = 1,\n  /** Saved Tag */\n  SAVED_TAG = 'Saved',\n  /** Max number of Conversation starters for Agents/Assistants */\n  MAX_CONVO_STARTERS = 4,\n  /** Global/instance Project Name */\n  GLOBAL_PROJECT_NAME = 'instance',\n  /** Delimiter for MCP tools */\n  mcp_delimiter = '_mcp_',\n  /** Prefix for MCP plugins */\n  mcp_prefix = 'mcp_',\n  /** Placeholder Agent ID for Ephemeral Agents */\n  EPHEMERAL_AGENT_ID = 'ephemeral',\n}\n\nexport enum LocalStorageKeys {\n  /** Key for the admin defined App Title */\n  APP_TITLE = 'appTitle',\n  /** Key for the last conversation setup. */\n  LAST_CONVO_SETUP = 'lastConversationSetup',\n  /** Key for the last selected model. */\n  LAST_MODEL = 'lastSelectedModel',\n  /** Key for the last selected tools. */\n  LAST_TOOLS = 'lastSelectedTools',\n  /** Key for the last selected spec by name*/\n  LAST_SPEC = 'lastSelectedSpec',\n  /** Key for temporary files to delete */\n  FILES_TO_DELETE = 'filesToDelete',\n  /** Prefix key for the last selected assistant ID by index */\n  ASST_ID_PREFIX = 'assistant_id__',\n  /** Prefix key for the last selected agent ID by index */\n  AGENT_ID_PREFIX = 'agent_id__',\n  /** Key for the last selected fork setting */\n  FORK_SETTING = 'forkSetting',\n  /** Key for remembering the last selected option, instead of manually selecting */\n  REMEMBER_FORK_OPTION = 'rememberDefaultFork',\n  /** Key for remembering the split at target fork option modifier */\n  FORK_SPLIT_AT_TARGET = 'splitAtTarget',\n  /** Key for saving text drafts */\n  TEXT_DRAFT = 'textDraft_',\n  /** Key for saving file drafts */\n  FILES_DRAFT = 'filesDraft_',\n  /** Key for last Selected Prompt Category */\n  LAST_PROMPT_CATEGORY = 'lastPromptCategory',\n  /** Key for rendering User Messages as Markdown */\n  ENABLE_USER_MSG_MARKDOWN = 'enableUserMsgMarkdown',\n  /** Key for displaying analysis tool code input */\n  SHOW_ANALYSIS_CODE = 'showAnalysisCode',\n  /** Last selected MCP values per conversation ID */\n  LAST_MCP_ = 'LAST_MCP_',\n  /** Last checked toggle for Code Interpreter API per conversation ID */\n  LAST_CODE_TOGGLE_ = 'LAST_CODE_TOGGLE_',\n  /** Last checked toggle for Web Search per conversation ID */\n  LAST_WEB_SEARCH_TOGGLE_ = 'LAST_WEB_SEARCH_TOGGLE_',\n  /** Last checked toggle for File Search per conversation ID */\n  LAST_FILE_SEARCH_TOGGLE_ = 'LAST_FILE_SEARCH_TOGGLE_',\n  /** Key for the last selected agent provider */\n  LAST_AGENT_PROVIDER = 'lastAgentProvider',\n  /** Key for the last selected agent model */\n  LAST_AGENT_MODEL = 'lastAgentModel',\n  /** Pin state for MCP tools per conversation ID */\n  PIN_MCP_ = 'PIN_MCP_',\n  /** Pin state for Web Search per conversation ID */\n  PIN_WEB_SEARCH_ = 'PIN_WEB_SEARCH_',\n  /** Pin state for Code Interpreter per conversation ID */\n  PIN_CODE_INTERPRETER_ = 'PIN_CODE_INTERPRETER_',\n}\n\nexport enum ForkOptions {\n  /** Key for direct path option */\n  DIRECT_PATH = 'directPath',\n  /** Key for including branches */\n  INCLUDE_BRANCHES = 'includeBranches',\n  /** Key for target level fork (default) */\n  TARGET_LEVEL = 'targetLevel',\n  /** Default option */\n  DEFAULT = 'default',\n}\n\n/**\n * Enum for Cohere related constants\n */\nexport enum CohereConstants {\n  /**\n   * Cohere API Endpoint, for special handling\n   */\n  API_URL = 'https://api.cohere.ai/v1',\n  /**\n   * Role for \"USER\" messages\n   */\n  ROLE_USER = 'USER',\n  /**\n   * Role for \"SYSTEM\" messages\n   */\n  ROLE_SYSTEM = 'SYSTEM',\n  /**\n   * Role for \"CHATBOT\" messages\n   */\n  ROLE_CHATBOT = 'CHATBOT',\n  /**\n   * Title message as required by Cohere\n   */\n  TITLE_MESSAGE = 'TITLE:',\n}\n\nexport enum SystemCategories {\n  ALL = 'sys__all__sys',\n  MY_PROMPTS = 'sys__my__prompts__sys',\n  NO_CATEGORY = 'sys__no__category__sys',\n  SHARED_PROMPTS = 'sys__shared__prompts__sys',\n}\n\nexport const providerEndpointMap = {\n  [EModelEndpoint.openAI]: EModelEndpoint.openAI,\n  [EModelEndpoint.bedrock]: EModelEndpoint.bedrock,\n  [EModelEndpoint.anthropic]: EModelEndpoint.anthropic,\n  [EModelEndpoint.azureOpenAI]: EModelEndpoint.azureOpenAI,\n};\n\nexport const specialVariables = {\n  current_date: true,\n  current_user: true,\n  iso_datetime: true,\n  current_datetime: true,\n};\n\nexport type TSpecialVarLabel = `com_ui_special_var_${keyof typeof specialVariables}`;\n","import type { AssistantsEndpoint } from './schemas';\nimport * as q from './types/queries';\n\n// Testing this buildQuery function\nconst buildQuery = (params: Record<string, unknown>): string => {\n  const query = Object.entries(params)\n    .filter(([, value]) => {\n      if (Array.isArray(value)) {\n        return value.length > 0;\n      }\n      return value !== undefined && value !== null && value !== '';\n    })\n    .map(([key, value]) => {\n      if (Array.isArray(value)) {\n        return value.map((v) => `${key}=${encodeURIComponent(v)}`).join('&');\n      }\n      return `${key}=${encodeURIComponent(String(value))}`;\n    })\n    .join('&');\n  return query ? `?${query}` : '';\n};\n\nexport const health = () => '/health';\nexport const user = () => '/api/user';\n\nexport const balance = () => '/api/balance';\n\nexport const userPlugins = () => '/api/user/plugins';\n\nexport const deleteUser = () => '/api/user/delete';\n\nexport const messages = (params: q.MessagesListParams) => {\n  const { conversationId, messageId, ...rest } = params;\n\n  if (conversationId && messageId) {\n    return `/api/messages/${conversationId}/${messageId}`;\n  }\n\n  if (conversationId) {\n    return `/api/messages/${conversationId}`;\n  }\n\n  return `/api/messages${buildQuery(rest)}`;\n};\n\nconst shareRoot = '/api/share';\nexport const shareMessages = (shareId: string) => `${shareRoot}/${shareId}`;\nexport const getSharedLink = (conversationId: string) => `${shareRoot}/link/${conversationId}`;\nexport const getSharedLinks = (\n  pageSize: number,\n  isPublic: boolean,\n  sortBy: 'title' | 'createdAt',\n  sortDirection: 'asc' | 'desc',\n  search?: string,\n  cursor?: string,\n) =>\n  `${shareRoot}?pageSize=${pageSize}&isPublic=${isPublic}&sortBy=${sortBy}&sortDirection=${sortDirection}${\n    search ? `&search=${search}` : ''\n  }${cursor ? `&cursor=${cursor}` : ''}`;\nexport const createSharedLink = (conversationId: string) => `${shareRoot}/${conversationId}`;\nexport const updateSharedLink = (shareId: string) => `${shareRoot}/${shareId}`;\n\nconst keysEndpoint = '/api/keys';\n\nexport const keys = () => keysEndpoint;\n\nexport const userKeyQuery = (name: string) => `${keysEndpoint}?name=${name}`;\n\nexport const revokeUserKey = (name: string) => `${keysEndpoint}/${name}`;\n\nexport const revokeAllUserKeys = () => `${keysEndpoint}?all=true`;\n\nexport const conversationsRoot = '/api/convos';\n\nexport const conversations = (params: q.ConversationListParams) => {\n  return `${conversationsRoot}${buildQuery(params)}`;\n};\n\nexport const conversationById = (id: string) => `${conversationsRoot}/${id}`;\n\nexport const genTitle = () => `${conversationsRoot}/gen_title`;\n\nexport const updateConversation = () => `${conversationsRoot}/update`;\n\nexport const deleteConversation = () => `${conversationsRoot}`;\n\nexport const deleteAllConversation = () => `${conversationsRoot}/all`;\n\nexport const importConversation = () => `${conversationsRoot}/import`;\n\nexport const forkConversation = () => `${conversationsRoot}/fork`;\n\nexport const duplicateConversation = () => `${conversationsRoot}/duplicate`;\n\nexport const search = (q: string, cursor?: string | null) =>\n  `/api/search?q=${q}${cursor ? `&cursor=${cursor}` : ''}`;\n\nexport const searchEnabled = () => '/api/search/enable';\n\nexport const presets = () => '/api/presets';\n\nexport const deletePreset = () => '/api/presets/delete';\n\nexport const aiEndpoints = () => '/api/endpoints';\n\nexport const endpointsConfigOverride = () => '/api/endpoints/config/override';\n\nexport const models = () => '/api/models';\n\nexport const tokenizer = () => '/api/tokenizer';\n\nexport const login = () => '/api/auth/login';\n\nexport const logout = () => '/api/auth/logout';\n\nexport const register = () => '/api/auth/register';\n\nexport const loginFacebook = () => '/api/auth/facebook';\n\nexport const loginGoogle = () => '/api/auth/google';\n\nexport const refreshToken = (retry?: boolean) =>\n  `/api/auth/refresh${retry === true ? '?retry=true' : ''}`;\n\nexport const requestPasswordReset = () => '/api/auth/requestPasswordReset';\n\nexport const resetPassword = () => '/api/auth/resetPassword';\n\nexport const verifyEmail = () => '/api/user/verify';\n\nexport const resendVerificationEmail = () => '/api/user/verify/resend';\n\nexport const plugins = () => '/api/plugins';\n\nexport const config = () => '/api/config';\n\nexport const prompts = () => '/api/prompts';\n\nexport const assistants = ({\n  path = '',\n  options,\n  version,\n  endpoint,\n  isAvatar,\n}: {\n  path?: string;\n  options?: object;\n  endpoint?: AssistantsEndpoint;\n  version: number | string;\n  isAvatar?: boolean;\n}) => {\n  let url = isAvatar === true ? `${images()}/assistants` : `/api/assistants/v${version}`;\n\n  if (path && path !== '') {\n    url += `/${path}`;\n  }\n\n  if (endpoint) {\n    options = {\n      ...(options ?? {}),\n      endpoint,\n    };\n  }\n\n  if (options && Object.keys(options).length > 0) {\n    const queryParams = new URLSearchParams(options as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n\n  return url;\n};\n\nexport const agents = ({ path = '', options }: { path?: string; options?: object }) => {\n  let url = '/api/agents';\n\n  if (path && path !== '') {\n    url += `/${path}`;\n  }\n\n  if (options && Object.keys(options).length > 0) {\n    const queryParams = new URLSearchParams(options as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n\n  return url;\n};\n\nexport const revertAgentVersion = (agent_id: string) => `${agents({ path: `${agent_id}/revert` })}`;\n\nexport const files = () => '/api/files';\n\nexport const images = () => `${files()}/images`;\n\nexport const avatar = () => `${images()}/avatar`;\n\nexport const speech = () => `${files()}/speech`;\n\nexport const speechToText = () => `${speech()}/stt`;\n\nexport const textToSpeech = () => `${speech()}/tts`;\n\nexport const textToSpeechManual = () => `${textToSpeech()}/manual`;\n\nexport const textToSpeechVoices = () => `${textToSpeech()}/voices`;\n\nexport const getCustomConfigSpeech = () => `${speech()}/config/get`;\n\nexport const getPromptGroup = (_id: string) => `${prompts()}/groups/${_id}`;\n\nexport const getPromptGroupsWithFilters = (filter: object) => {\n  let url = `${prompts()}/groups`;\n  if (Object.keys(filter).length > 0) {\n    const queryParams = new URLSearchParams(filter as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n  return url;\n};\n\nexport const getPromptsWithFilters = (filter: object) => {\n  let url = prompts();\n  if (Object.keys(filter).length > 0) {\n    const queryParams = new URLSearchParams(filter as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n  return url;\n};\n\nexport const getPrompt = (_id: string) => `${prompts()}/${_id}`;\n\nexport const getRandomPrompts = (limit: number, skip: number) =>\n  `${prompts()}/random?limit=${limit}&skip=${skip}`;\n\nexport const postPrompt = prompts;\n\nexport const updatePromptGroup = getPromptGroup;\n\nexport const updatePromptLabels = (_id: string) => `${getPrompt(_id)}/labels`;\n\nexport const updatePromptTag = (_id: string) => `${getPrompt(_id)}/tags/production`;\n\nexport const deletePromptGroup = getPromptGroup;\n\nexport const deletePrompt = ({ _id, groupId }: { _id: string; groupId: string }) => {\n  return `${prompts()}/${_id}?groupId=${groupId}`;\n};\n\nexport const getCategories = () => '/api/categories';\n\nexport const getAllPromptGroups = () => `${prompts()}/all`;\n\n/* Roles */\nexport const roles = () => '/api/roles';\nexport const getRole = (roleName: string) => `${roles()}/${roleName.toLowerCase()}`;\nexport const updatePromptPermissions = (roleName: string) => `${getRole(roleName)}/prompts`;\nexport const updateMemoryPermissions = (roleName: string) => `${getRole(roleName)}/memories`;\nexport const updateAgentPermissions = (roleName: string) => `${getRole(roleName)}/agents`;\n\n/* Conversation Tags */\nexport const conversationTags = (tag?: string) =>\n  `/api/tags${tag != null && tag ? `/${encodeURIComponent(tag)}` : ''}`;\n\nexport const conversationTagsList = (pageNumber: string, sort?: string, order?: string) =>\n  `${conversationTags()}/list?pageNumber=${pageNumber}${sort ? `&sort=${sort}` : ''}${\n    order ? `&order=${order}` : ''\n  }`;\n\nexport const addTagToConversation = (conversationId: string) =>\n  `${conversationTags()}/convo/${conversationId}`;\n\nexport const userTerms = () => '/api/user/terms';\nexport const acceptUserTerms = () => '/api/user/terms/accept';\nexport const banner = () => '/api/banner';\n\n// Message Feedback\nexport const feedback = (conversationId: string, messageId: string) =>\n  `/api/messages/${conversationId}/${messageId}/feedback`;\n\n// Two-Factor Endpoints\nexport const enableTwoFactor = () => '/api/auth/2fa/enable';\nexport const verifyTwoFactor = () => '/api/auth/2fa/verify';\nexport const confirmTwoFactor = () => '/api/auth/2fa/confirm';\nexport const disableTwoFactor = () => '/api/auth/2fa/disable';\nexport const regenerateBackupCodes = () => '/api/auth/2fa/backup/regenerate';\nexport const verifyTwoFactorTemp = () => '/api/auth/2fa/verify-temp';\n\n/* Memories */\nexport const memories = () => '/api/memories';\nexport const memory = (key: string) => `${memories()}/${encodeURIComponent(key)}`;\nexport const memoryPreferences = () => `${memories()}/preferences`;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport axios, { AxiosError, AxiosRequestConfig } from 'axios';\nimport * as endpoints from './api-endpoints';\nimport { setTokenHeader } from './headers-helpers';\nimport type * as t from './types';\n\nasync function _get<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.get(url, { ...options });\n  return response.data;\n}\n\nasync function _getResponse<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  return await axios.get(url, { ...options });\n}\n\nasync function _post(url: string, data?: any) {\n  const response = await axios.post(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _postMultiPart(url: string, formData: FormData, options?: AxiosRequestConfig) {\n  const response = await axios.post(url, formData, {\n    ...options,\n    headers: { 'Content-Type': 'multipart/form-data' },\n  });\n  return response.data;\n}\n\nasync function _postTTS(url: string, formData: FormData, options?: AxiosRequestConfig) {\n  const response = await axios.post(url, formData, {\n    ...options,\n    headers: { 'Content-Type': 'multipart/form-data' },\n    responseType: 'arraybuffer',\n  });\n  return response.data;\n}\n\nasync function _put(url: string, data?: any) {\n  const response = await axios.put(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _delete<T>(url: string): Promise<T> {\n  const response = await axios.delete(url);\n  return response.data;\n}\n\nasync function _deleteWithOptions<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.delete(url, { ...options });\n  return response.data;\n}\n\nasync function _patch(url: string, data?: any) {\n  const response = await axios.patch(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nlet isRefreshing = false;\nlet failedQueue: { resolve: (value?: any) => void; reject: (reason?: any) => void }[] = [];\n\nconst refreshToken = (retry?: boolean): Promise<t.TRefreshTokenResponse | undefined> =>\n  _post(endpoints.refreshToken(retry));\n\nconst dispatchTokenUpdatedEvent = (token: string) => {\n  setTokenHeader(token);\n  window.dispatchEvent(new CustomEvent('tokenUpdated', { detail: token }));\n};\n\nconst processQueue = (error: AxiosError | null, token: string | null = null) => {\n  failedQueue.forEach((prom) => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\naxios.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    if (!error.response) {\n      return Promise.reject(error);\n    }\n\n    if (originalRequest.url?.includes('/api/auth/2fa') === true) {\n      return Promise.reject(error);\n    }\n    if (originalRequest.url?.includes('/api/auth/logout') === true) {\n      return Promise.reject(error);\n    }\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      console.warn('401 error, refreshing token');\n      originalRequest._retry = true;\n\n      if (isRefreshing) {\n        try {\n          const token = await new Promise((resolve, reject) => {\n            failedQueue.push({ resolve, reject });\n          });\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          return await axios(originalRequest);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      }\n\n      isRefreshing = true;\n\n      try {\n        const response = await refreshToken(\n          // Handle edge case where we get a blank screen if the initial 401 error is from a refresh token request\n          originalRequest.url?.includes('api/auth/refresh') === true ? true : false,\n        );\n\n        const token = response?.token ?? '';\n\n        if (token) {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          dispatchTokenUpdatedEvent(token);\n          processQueue(null, token);\n          return await axios(originalRequest);\n        } else if (window.location.href.includes('share/')) {\n          console.log(\n            `Refresh token failed from shared link, attempting request to ${originalRequest.url}`,\n          );\n        } else {\n          window.location.href = '/login';\n        }\n      } catch (err) {\n        processQueue(err as AxiosError, null);\n        return Promise.reject(err);\n      } finally {\n        isRefreshing = false;\n      }\n    }\n\n    return Promise.reject(error);\n  },\n);\n\nexport default {\n  get: _get,\n  getResponse: _getResponse,\n  post: _post,\n  postMultiPart: _postMultiPart,\n  postTTS: _postTTS,\n  put: _put,\n  delete: _delete,\n  deleteWithOptions: _deleteWithOptions,\n  patch: _patch,\n  refreshToken,\n  dispatchTokenUpdatedEvent,\n};\n","import axios from 'axios';\n\nexport function setAcceptLanguageHeader(value: string): void {\n  axios.defaults.headers.common['Accept-Language'] = value;\n}\n\nexport function setTokenHeader(token: string) {\n  axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n}\n","import type { AxiosResponse } from 'axios';\nimport type * as t from './types';\nimport * as endpoints from './api-endpoints';\nimport * as a from './types/assistants';\nimport * as ag from './types/agents';\nimport * as m from './types/mutations';\nimport * as q from './types/queries';\nimport * as f from './types/files';\nimport * as config from './config';\nimport request from './request';\nimport * as s from './schemas';\nimport * as r from './roles';\n\nexport function revokeUserKey(name: string): Promise<unknown> {\n  return request.delete(endpoints.revokeUserKey(name));\n}\n\nexport function revokeAllUserKeys(): Promise<unknown> {\n  return request.delete(endpoints.revokeAllUserKeys());\n}\n\nexport function deleteUser(): Promise<s.TPreset> {\n  return request.delete(endpoints.deleteUser());\n}\n\nexport function getSharedMessages(shareId: string): Promise<t.TSharedMessagesResponse> {\n  return request.get(endpoints.shareMessages(shareId));\n}\n\nexport const listSharedLinks = async (\n  params: q.SharedLinksListParams,\n): Promise<q.SharedLinksResponse> => {\n  const { pageSize, isPublic, sortBy, sortDirection, search, cursor } = params;\n\n  return request.get(\n    endpoints.getSharedLinks(pageSize, isPublic, sortBy, sortDirection, search, cursor),\n  );\n};\n\nexport function getSharedLink(conversationId: string): Promise<t.TSharedLinkGetResponse> {\n  return request.get(endpoints.getSharedLink(conversationId));\n}\n\nexport function createSharedLink(conversationId: string): Promise<t.TSharedLinkResponse> {\n  return request.post(endpoints.createSharedLink(conversationId));\n}\n\nexport function updateSharedLink(shareId: string): Promise<t.TSharedLinkResponse> {\n  return request.patch(endpoints.updateSharedLink(shareId));\n}\n\nexport function deleteSharedLink(shareId: string): Promise<m.TDeleteSharedLinkResponse> {\n  return request.delete(endpoints.shareMessages(shareId));\n}\n\nexport function updateUserKey(payload: t.TUpdateUserKeyRequest) {\n  const { value } = payload;\n  if (!value) {\n    throw new Error('value is required');\n  }\n\n  return request.put(endpoints.keys(), payload);\n}\n\nexport function getPresets(): Promise<s.TPreset[]> {\n  return request.get(endpoints.presets());\n}\n\nexport function createPreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function updatePreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function deletePreset(arg: s.TPreset | undefined): Promise<m.PresetDeleteResponse> {\n  return request.post(endpoints.deletePreset(), arg);\n}\n\nexport function getSearchEnabled(): Promise<boolean> {\n  return request.get(endpoints.searchEnabled());\n}\n\nexport function getUser(): Promise<t.TUser> {\n  return request.get(endpoints.user());\n}\n\nexport function getUserBalance(): Promise<t.TBalanceResponse> {\n  return request.get(endpoints.balance());\n}\n\nexport const updateTokenCount = (text: string) => {\n  return request.post(endpoints.tokenizer(), { arg: text });\n};\n\nexport const login = (payload: t.TLoginUser): Promise<t.TLoginResponse> => {\n  return request.post(endpoints.login(), payload);\n};\n\nexport const logout = (): Promise<m.TLogoutResponse> => {\n  return request.post(endpoints.logout());\n};\n\nexport const register = (payload: t.TRegisterUser) => {\n  return request.post(endpoints.register(), payload);\n};\n\nexport const userKeyQuery = (name: string): Promise<t.TCheckUserKeyResponse> =>\n  request.get(endpoints.userKeyQuery(name));\n\nexport const getLoginGoogle = () => {\n  return request.get(endpoints.loginGoogle());\n};\n\nexport const requestPasswordReset = (\n  payload: t.TRequestPasswordReset,\n): Promise<t.TRequestPasswordResetResponse> => {\n  return request.post(endpoints.requestPasswordReset(), payload);\n};\n\nexport const resetPassword = (payload: t.TResetPassword) => {\n  return request.post(endpoints.resetPassword(), payload);\n};\n\nexport const verifyEmail = (payload: t.TVerifyEmail): Promise<t.VerifyEmailResponse> => {\n  return request.post(endpoints.verifyEmail(), payload);\n};\n\nexport const resendVerificationEmail = (\n  payload: t.TResendVerificationEmail,\n): Promise<t.VerifyEmailResponse> => {\n  return request.post(endpoints.resendVerificationEmail(), payload);\n};\n\nexport const getAvailablePlugins = (): Promise<s.TPlugin[]> => {\n  return request.get(endpoints.plugins());\n};\n\nexport const updateUserPlugins = (payload: t.TUpdateUserPlugins) => {\n  return request.post(endpoints.userPlugins(), payload);\n};\n\n/* Config */\n\nexport const getStartupConfig = (): Promise<\n  config.TStartupConfig & {\n    mcpCustomUserVars?: Record<string, { title: string; description: string }>;\n  }\n> => {\n  return request.get(endpoints.config());\n};\n\nexport const getAIEndpoints = (): Promise<t.TEndpointsConfig> => {\n  return request.get(endpoints.aiEndpoints());\n};\n\nexport const getModels = async (): Promise<t.TModelsConfig> => {\n  return request.get(endpoints.models());\n};\n\nexport const getEndpointsConfigOverride = (): Promise<unknown | boolean> => {\n  return request.get(endpoints.endpointsConfigOverride());\n};\n\n/* Assistants */\n\nexport const createAssistant = ({\n  version,\n  ...data\n}: a.AssistantCreateParams): Promise<a.Assistant> => {\n  return request.post(endpoints.assistants({ version }), data);\n};\n\nexport const getAssistantById = ({\n  endpoint,\n  assistant_id,\n  version,\n}: {\n  endpoint: s.AssistantsEndpoint;\n  assistant_id: string;\n  version: number | string | number;\n}): Promise<a.Assistant> => {\n  return request.get(\n    endpoints.assistants({\n      path: assistant_id,\n      endpoint,\n      version,\n    }),\n  );\n};\n\nexport const updateAssistant = ({\n  assistant_id,\n  data,\n  version,\n}: {\n  assistant_id: string;\n  data: a.AssistantUpdateParams;\n  version: number | string;\n}): Promise<a.Assistant> => {\n  return request.patch(\n    endpoints.assistants({\n      path: assistant_id,\n      version,\n    }),\n    data,\n  );\n};\n\nexport const deleteAssistant = ({\n  assistant_id,\n  model,\n  endpoint,\n  version,\n}: m.DeleteAssistantBody & { version: number | string }): Promise<void> => {\n  return request.delete(\n    endpoints.assistants({\n      path: assistant_id,\n      options: { model, endpoint },\n      version,\n    }),\n  );\n};\n\nexport const listAssistants = (\n  params: a.AssistantListParams,\n  version: number | string,\n): Promise<a.AssistantListResponse> => {\n  return request.get(\n    endpoints.assistants({\n      version,\n      options: params,\n    }),\n  );\n};\n\nexport function getAssistantDocs({\n  endpoint,\n  version,\n}: {\n  endpoint: s.AssistantsEndpoint | string;\n  version: number | string;\n}): Promise<a.AssistantDocument[]> {\n  if (!s.isAssistantsEndpoint(endpoint)) {\n    return Promise.resolve([]);\n  }\n  return request.get(\n    endpoints.assistants({\n      path: 'documents',\n      version,\n      options: { endpoint },\n      endpoint: endpoint as s.AssistantsEndpoint,\n    }),\n  );\n}\n\n/* Tools */\n\nexport const getAvailableTools = (\n  _endpoint: s.AssistantsEndpoint | s.EModelEndpoint.agents,\n  version?: number | string,\n): Promise<s.TPlugin[]> => {\n  let path = '';\n  if (s.isAssistantsEndpoint(_endpoint)) {\n    const endpoint = _endpoint as s.AssistantsEndpoint;\n    path = endpoints.assistants({\n      path: 'tools',\n      endpoint: endpoint,\n      version: version ?? config.defaultAssistantsVersion[endpoint],\n    });\n  } else {\n    path = endpoints.agents({\n      path: 'tools',\n    });\n  }\n\n  return request.get(path);\n};\n\nexport const getVerifyAgentToolAuth = (\n  params: q.VerifyToolAuthParams,\n): Promise<q.VerifyToolAuthResponse> => {\n  return request.get(\n    endpoints.agents({\n      path: `tools/${params.toolId}/auth`,\n    }),\n  );\n};\n\nexport const callTool = <T extends m.ToolId>({\n  toolId,\n  toolParams,\n}: {\n  toolId: T;\n  toolParams: m.ToolParams<T>;\n}): Promise<m.ToolCallResponse> => {\n  return request.post(\n    endpoints.agents({\n      path: `tools/${toolId}/call`,\n    }),\n    toolParams,\n  );\n};\n\nexport const getToolCalls = (params: q.GetToolCallParams): Promise<q.ToolCallResults> => {\n  return request.get(\n    endpoints.agents({\n      path: 'tools/calls',\n      options: params,\n    }),\n  );\n};\n\n/* Files */\n\nexport const getFiles = (): Promise<f.TFile[]> => {\n  return request.get(endpoints.files());\n};\n\nexport const getFileConfig = (): Promise<f.FileConfig> => {\n  return request.get(`${endpoints.files()}/config`);\n};\n\nexport const uploadImage = (\n  data: FormData,\n  signal?: AbortSignal | null,\n): Promise<f.TFileUpload> => {\n  const requestConfig = signal ? { signal } : undefined;\n  return request.postMultiPart(endpoints.images(), data, requestConfig);\n};\n\nexport const uploadFile = (data: FormData, signal?: AbortSignal | null): Promise<f.TFileUpload> => {\n  const requestConfig = signal ? { signal } : undefined;\n  return request.postMultiPart(endpoints.files(), data, requestConfig);\n};\n\n/* actions */\n\nexport const updateAction = (data: m.UpdateActionVariables): Promise<m.UpdateActionResponse> => {\n  const { assistant_id, version, ...body } = data;\n  return request.post(\n    endpoints.assistants({\n      path: `actions/${assistant_id}`,\n      version,\n    }),\n    body,\n  );\n};\n\nexport function getActions(): Promise<ag.Action[]> {\n  return request.get(\n    endpoints.agents({\n      path: 'actions',\n    }),\n  );\n}\n\nexport const deleteAction = async ({\n  assistant_id,\n  action_id,\n  model,\n  version,\n  endpoint,\n}: m.DeleteActionVariables & { version: number | string }): Promise<void> =>\n  request.delete(\n    endpoints.assistants({\n      path: `actions/${assistant_id}/${action_id}/${model}`,\n      version,\n      endpoint,\n    }),\n  );\n\n/**\n * Agents\n */\n\nexport const createAgent = ({ ...data }: a.AgentCreateParams): Promise<a.Agent> => {\n  return request.post(endpoints.agents({}), data);\n};\n\nexport const getAgentById = ({ agent_id }: { agent_id: string }): Promise<a.Agent> => {\n  return request.get(\n    endpoints.agents({\n      path: agent_id,\n    }),\n  );\n};\n\nexport const updateAgent = ({\n  agent_id,\n  data,\n}: {\n  agent_id: string;\n  data: a.AgentUpdateParams;\n}): Promise<a.Agent> => {\n  return request.patch(\n    endpoints.agents({\n      path: agent_id,\n    }),\n    data,\n  );\n};\n\nexport const duplicateAgent = ({\n  agent_id,\n}: m.DuplicateAgentBody): Promise<{ agent: a.Agent; actions: ag.Action[] }> => {\n  return request.post(\n    endpoints.agents({\n      path: `${agent_id}/duplicate`,\n    }),\n  );\n};\n\nexport const deleteAgent = ({ agent_id }: m.DeleteAgentBody): Promise<void> => {\n  return request.delete(\n    endpoints.agents({\n      path: agent_id,\n    }),\n  );\n};\n\nexport const listAgents = (params: a.AgentListParams): Promise<a.AgentListResponse> => {\n  return request.get(\n    endpoints.agents({\n      options: params,\n    }),\n  );\n};\n\nexport const revertAgentVersion = ({\n  agent_id,\n  version_index,\n}: {\n  agent_id: string;\n  version_index: number;\n}): Promise<a.Agent> => request.post(endpoints.revertAgentVersion(agent_id), { version_index });\n\n/* Tools */\n\nexport const getAvailableAgentTools = (): Promise<s.TPlugin[]> => {\n  return request.get(\n    endpoints.agents({\n      path: 'tools',\n    }),\n  );\n};\n\n/* Actions */\n\nexport const updateAgentAction = (\n  data: m.UpdateAgentActionVariables,\n): Promise<m.UpdateAgentActionResponse> => {\n  const { agent_id, ...body } = data;\n  return request.post(\n    endpoints.agents({\n      path: `actions/${agent_id}`,\n    }),\n    body,\n  );\n};\n\nexport const deleteAgentAction = async ({\n  agent_id,\n  action_id,\n}: m.DeleteAgentActionVariables): Promise<void> =>\n  request.delete(\n    endpoints.agents({\n      path: `actions/${agent_id}/${action_id}`,\n    }),\n  );\n\n/**\n * Imports a conversations file.\n *\n * @param data - The FormData containing the file to import.\n * @returns A Promise that resolves to the import start response.\n */\nexport const importConversationsFile = (data: FormData): Promise<t.TImportResponse> => {\n  return request.postMultiPart(endpoints.importConversation(), data);\n};\n\nexport const uploadAvatar = (data: FormData): Promise<f.AvatarUploadResponse> => {\n  return request.postMultiPart(endpoints.avatar(), data);\n};\n\nexport const uploadAssistantAvatar = (data: m.AssistantAvatarVariables): Promise<a.Assistant> => {\n  return request.postMultiPart(\n    endpoints.assistants({\n      isAvatar: true,\n      path: `${data.assistant_id}/avatar`,\n      options: { model: data.model, endpoint: data.endpoint },\n      version: data.version,\n    }),\n    data.formData,\n  );\n};\n\nexport const uploadAgentAvatar = (data: m.AgentAvatarVariables): Promise<a.Agent> => {\n  return request.postMultiPart(\n    `${endpoints.images()}/agents/${data.agent_id}/avatar`,\n    data.formData,\n  );\n};\n\nexport const getFileDownload = async (userId: string, file_id: string): Promise<AxiosResponse> => {\n  return request.getResponse(`${endpoints.files()}/download/${userId}/${file_id}`, {\n    responseType: 'blob',\n    headers: {\n      Accept: 'application/octet-stream',\n    },\n  });\n};\n\nexport const getCodeOutputDownload = async (url: string): Promise<AxiosResponse> => {\n  return request.getResponse(url, {\n    responseType: 'blob',\n    headers: {\n      Accept: 'application/octet-stream',\n    },\n  });\n};\n\nexport const deleteFiles = async (payload: {\n  files: f.BatchFile[];\n  agent_id?: string;\n  assistant_id?: string;\n  tool_resource?: a.EToolResources;\n}): Promise<f.DeleteFilesResponse> =>\n  request.deleteWithOptions(endpoints.files(), {\n    data: payload,\n  });\n\n/* Speech */\n\nexport const speechToText = (data: FormData): Promise<f.SpeechToTextResponse> => {\n  return request.postMultiPart(endpoints.speechToText(), data);\n};\n\nexport const textToSpeech = (data: FormData): Promise<ArrayBuffer> => {\n  return request.postTTS(endpoints.textToSpeechManual(), data);\n};\n\nexport const getVoices = (): Promise<f.VoiceResponse> => {\n  return request.get(endpoints.textToSpeechVoices());\n};\n\nexport const getCustomConfigSpeech = (): Promise<t.TCustomConfigSpeechResponse> => {\n  return request.get(endpoints.getCustomConfigSpeech());\n};\n\n/* conversations */\n\nexport function duplicateConversation(\n  payload: t.TDuplicateConvoRequest,\n): Promise<t.TDuplicateConvoResponse> {\n  return request.post(endpoints.duplicateConversation(), payload);\n}\n\nexport function forkConversation(payload: t.TForkConvoRequest): Promise<t.TForkConvoResponse> {\n  return request.post(endpoints.forkConversation(), payload);\n}\n\nexport function deleteConversation(payload: t.TDeleteConversationRequest) {\n  return request.deleteWithOptions(endpoints.deleteConversation(), { data: { arg: payload } });\n}\n\nexport function clearAllConversations(): Promise<unknown> {\n  return request.delete(endpoints.deleteAllConversation());\n}\n\nexport const listConversations = (\n  params?: q.ConversationListParams,\n): Promise<q.ConversationListResponse> => {\n  return request.get(endpoints.conversations(params ?? {}));\n};\n\nexport function getConversations(cursor: string): Promise<t.TGetConversationsResponse> {\n  return request.get(endpoints.conversations({ cursor }));\n}\n\nexport function getConversationById(id: string): Promise<s.TConversation> {\n  return request.get(endpoints.conversationById(id));\n}\n\nexport function updateConversation(\n  payload: t.TUpdateConversationRequest,\n): Promise<t.TUpdateConversationResponse> {\n  return request.post(endpoints.updateConversation(), { arg: payload });\n}\n\nexport function archiveConversation(\n  payload: t.TArchiveConversationRequest,\n): Promise<t.TArchiveConversationResponse> {\n  return request.post(endpoints.updateConversation(), { arg: payload });\n}\n\nexport function genTitle(payload: m.TGenTitleRequest): Promise<m.TGenTitleResponse> {\n  return request.post(endpoints.genTitle(), payload);\n}\n\nexport const listMessages = (params?: q.MessagesListParams): Promise<q.MessagesListResponse> => {\n  return request.get(endpoints.messages(params ?? {}));\n};\n\nexport function updateMessage(payload: t.TUpdateMessageRequest): Promise<unknown> {\n  const { conversationId, messageId, text } = payload;\n  if (!conversationId) {\n    throw new Error('conversationId is required');\n  }\n\n  return request.put(endpoints.messages({ conversationId, messageId }), { text });\n}\n\nexport function updateMessageContent(payload: t.TUpdateMessageContent): Promise<unknown> {\n  const { conversationId, messageId, index, text } = payload;\n  if (!conversationId) {\n    throw new Error('conversationId is required');\n  }\n\n  return request.put(endpoints.messages({ conversationId, messageId }), { text, index });\n}\n\nexport const editArtifact = async ({\n  messageId,\n  ...params\n}: m.TEditArtifactRequest): Promise<m.TEditArtifactResponse> => {\n  return request.post(`/api/messages/artifact/${messageId}`, params);\n};\n\nexport function getMessagesByConvoId(conversationId: string): Promise<s.TMessage[]> {\n  if (\n    conversationId === config.Constants.NEW_CONVO ||\n    conversationId === config.Constants.PENDING_CONVO\n  ) {\n    return Promise.resolve([]);\n  }\n  return request.get(endpoints.messages({ conversationId }));\n}\n\nexport function getPrompt(id: string): Promise<{ prompt: t.TPrompt }> {\n  return request.get(endpoints.getPrompt(id));\n}\n\nexport function getPrompts(filter: t.TPromptsWithFilterRequest): Promise<t.TPrompt[]> {\n  return request.get(endpoints.getPromptsWithFilters(filter));\n}\n\nexport function getAllPromptGroups(): Promise<q.AllPromptGroupsResponse> {\n  return request.get(endpoints.getAllPromptGroups());\n}\n\nexport function getPromptGroups(\n  filter: t.TPromptGroupsWithFilterRequest,\n): Promise<t.PromptGroupListResponse> {\n  return request.get(endpoints.getPromptGroupsWithFilters(filter));\n}\n\nexport function getPromptGroup(id: string): Promise<t.TPromptGroup> {\n  return request.get(endpoints.getPromptGroup(id));\n}\n\nexport function createPrompt(payload: t.TCreatePrompt): Promise<t.TCreatePromptResponse> {\n  return request.post(endpoints.postPrompt(), payload);\n}\n\nexport function updatePromptGroup(\n  variables: t.TUpdatePromptGroupVariables,\n): Promise<t.TUpdatePromptGroupResponse> {\n  return request.patch(endpoints.updatePromptGroup(variables.id), variables.payload);\n}\n\nexport function deletePrompt(payload: t.TDeletePromptVariables): Promise<t.TDeletePromptResponse> {\n  return request.delete(endpoints.deletePrompt(payload));\n}\n\nexport function makePromptProduction(id: string): Promise<t.TMakePromptProductionResponse> {\n  return request.patch(endpoints.updatePromptTag(id));\n}\n\nexport function updatePromptLabels(\n  variables: t.TUpdatePromptLabelsRequest,\n): Promise<t.TUpdatePromptLabelsResponse> {\n  return request.patch(endpoints.updatePromptLabels(variables.id), variables.payload);\n}\n\nexport function deletePromptGroup(id: string): Promise<t.TDeletePromptGroupResponse> {\n  return request.delete(endpoints.deletePromptGroup(id));\n}\n\nexport function getCategories(): Promise<t.TGetCategoriesResponse> {\n  return request.get(endpoints.getCategories());\n}\n\nexport function getRandomPrompts(\n  variables: t.TGetRandomPromptsRequest,\n): Promise<t.TGetRandomPromptsResponse> {\n  return request.get(endpoints.getRandomPrompts(variables.limit, variables.skip));\n}\n\n/* Roles */\nexport function getRole(roleName: string): Promise<r.TRole> {\n  return request.get(endpoints.getRole(roleName));\n}\n\nexport function updatePromptPermissions(\n  variables: m.UpdatePromptPermVars,\n): Promise<m.UpdatePermResponse> {\n  return request.put(endpoints.updatePromptPermissions(variables.roleName), variables.updates);\n}\n\nexport function updateAgentPermissions(\n  variables: m.UpdateAgentPermVars,\n): Promise<m.UpdatePermResponse> {\n  return request.put(endpoints.updateAgentPermissions(variables.roleName), variables.updates);\n}\n\nexport function updateMemoryPermissions(\n  variables: m.UpdateMemoryPermVars,\n): Promise<m.UpdatePermResponse> {\n  return request.put(endpoints.updateMemoryPermissions(variables.roleName), variables.updates);\n}\n\n/* Tags */\nexport function getConversationTags(): Promise<t.TConversationTagsResponse> {\n  return request.get(endpoints.conversationTags());\n}\n\nexport function createConversationTag(\n  payload: t.TConversationTagRequest,\n): Promise<t.TConversationTagResponse> {\n  return request.post(endpoints.conversationTags(), payload);\n}\n\nexport function updateConversationTag(\n  tag: string,\n  payload: t.TConversationTagRequest,\n): Promise<t.TConversationTagResponse> {\n  return request.put(endpoints.conversationTags(tag), payload);\n}\nexport function deleteConversationTag(tag: string): Promise<t.TConversationTagResponse> {\n  return request.delete(endpoints.conversationTags(tag));\n}\n\nexport function addTagToConversation(\n  conversationId: string,\n  payload: t.TTagConversationRequest,\n): Promise<t.TTagConversationResponse> {\n  return request.put(endpoints.addTagToConversation(conversationId), payload);\n}\nexport function rebuildConversationTags(): Promise<t.TConversationTagsResponse> {\n  return request.post(endpoints.conversationTags('rebuild'));\n}\n\nexport function healthCheck(): Promise<string> {\n  return request.get(endpoints.health());\n}\n\nexport function getUserTerms(): Promise<t.TUserTermsResponse> {\n  return request.get(endpoints.userTerms());\n}\n\nexport function acceptTerms(): Promise<t.TAcceptTermsResponse> {\n  return request.post(endpoints.acceptUserTerms());\n}\n\nexport function getBanner(): Promise<t.TBannerResponse> {\n  return request.get(endpoints.banner());\n}\n\nexport function updateFeedback(\n  conversationId: string,\n  messageId: string,\n  payload: t.TUpdateFeedbackRequest,\n): Promise<t.TUpdateFeedbackResponse> {\n  return request.put(endpoints.feedback(conversationId, messageId), payload);\n}\n\n// 2FA\nexport function enableTwoFactor(): Promise<t.TEnable2FAResponse> {\n  return request.get(endpoints.enableTwoFactor());\n}\n\nexport function verifyTwoFactor(payload: t.TVerify2FARequest): Promise<t.TVerify2FAResponse> {\n  return request.post(endpoints.verifyTwoFactor(), payload);\n}\n\nexport function confirmTwoFactor(payload: t.TVerify2FARequest): Promise<t.TVerify2FAResponse> {\n  return request.post(endpoints.confirmTwoFactor(), payload);\n}\n\nexport function disableTwoFactor(): Promise<t.TDisable2FAResponse> {\n  return request.post(endpoints.disableTwoFactor());\n}\n\nexport function regenerateBackupCodes(): Promise<t.TRegenerateBackupCodesResponse> {\n  return request.post(endpoints.regenerateBackupCodes());\n}\n\nexport function verifyTwoFactorTemp(\n  payload: t.TVerify2FATempRequest,\n): Promise<t.TVerify2FATempResponse> {\n  return request.post(endpoints.verifyTwoFactorTemp(), payload);\n}\n\n/* Memories */\nexport const getMemories = (): Promise<q.MemoriesResponse> => {\n  return request.get(endpoints.memories());\n};\n\nexport const deleteMemory = (key: string): Promise<void> => {\n  return request.delete(endpoints.memory(key));\n};\n\nexport const updateMemory = (\n  key: string,\n  value: string,\n  originalKey?: string,\n): Promise<q.TUserMemory> => {\n  return request.patch(endpoints.memory(originalKey || key), { key, value });\n};\n\nexport const updateMemoryPreferences = (preferences: {\n  memories: boolean;\n}): Promise<{ updated: boolean; preferences: { memories: boolean } }> => {\n  return request.patch(endpoints.memoryPreferences(), preferences);\n};\n\nexport const createMemory = (data: {\n  key: string;\n  value: string;\n}): Promise<{ created: boolean; memory: q.TUserMemory }> => {\n  return request.post(endpoints.memories(), data);\n};\n","export enum QueryKeys {\n  messages = 'messages',\n  sharedMessages = 'sharedMessages',\n  sharedLinks = 'sharedLinks',\n  allConversations = 'allConversations',\n  archivedConversations = 'archivedConversations',\n  searchConversations = 'searchConversations',\n  conversation = 'conversation',\n  searchEnabled = 'searchEnabled',\n  user = 'user',\n  name = 'name', // user key name\n  models = 'models',\n  balance = 'balance',\n  endpoints = 'endpoints',\n  presets = 'presets',\n  searchResults = 'searchResults',\n  tokenCount = 'tokenCount',\n  availablePlugins = 'availablePlugins',\n  startupConfig = 'startupConfig',\n  assistants = 'assistants',\n  assistant = 'assistant',\n  agents = 'agents',\n  agent = 'agent',\n  endpointsConfigOverride = 'endpointsConfigOverride',\n  files = 'files',\n  fileConfig = 'fileConfig',\n  tools = 'tools',\n  toolAuth = 'toolAuth',\n  toolCalls = 'toolCalls',\n  agentTools = 'agentTools',\n  actions = 'actions',\n  assistantDocs = 'assistantDocs',\n  agentDocs = 'agentDocs',\n  fileDownload = 'fileDownload',\n  voices = 'voices',\n  customConfigSpeech = 'customConfigSpeech',\n  prompts = 'prompts',\n  prompt = 'prompt',\n  promptGroups = 'promptGroups',\n  allPromptGroups = 'allPromptGroups',\n  promptGroup = 'promptGroup',\n  categories = 'categories',\n  randomPrompts = 'randomPrompts',\n  roles = 'roles',\n  conversationTags = 'conversationTags',\n  health = 'health',\n  userTerms = 'userTerms',\n  banner = 'banner',\n  /* Memories */\n  memories = 'memories',\n  /* Brand Mode */\n  brandConfig = 'brandConfig',\n}\n\nexport enum MutationKeys {\n  fileUpload = 'fileUpload',\n  fileDelete = 'fileDelete',\n  updatePreset = 'updatePreset',\n  deletePreset = 'deletePreset',\n  loginUser = 'loginUser',\n  logoutUser = 'logoutUser',\n  refreshToken = 'refreshToken',\n  avatarUpload = 'avatarUpload',\n  speechToText = 'speechToText',\n  textToSpeech = 'textToSpeech',\n  assistantAvatarUpload = 'assistantAvatarUpload',\n  agentAvatarUpload = 'agentAvatarUpload',\n  updateAction = 'updateAction',\n  updateAgentAction = 'updateAgentAction',\n  deleteAction = 'deleteAction',\n  deleteAgentAction = 'deleteAgentAction',\n  revertAgentVersion = 'revertAgentVersion',\n  deleteUser = 'deleteUser',\n  updateRole = 'updateRole',\n  enableTwoFactor = 'enableTwoFactor',\n  verifyTwoFactor = 'verifyTwoFactor',\n  updateMemoryPreferences = 'updateMemoryPreferences',\n}\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport type {\n  UseQueryOptions,\n  UseMutationResult,\n  QueryObserverResult,\n} from '@tanstack/react-query';\nimport { Constants, initialModelsConfig } from '../config';\nimport { defaultOrderQuery } from '../types/assistants';\nimport * as dataService from '../data-service';\nimport * as m from '../types/mutations';\nimport { QueryKeys } from '../keys';\nimport * as s from '../schemas';\nimport * as t from '../types';\n\nexport const useGetSharedMessages = (\n  shareId: string,\n  config?: UseQueryOptions<t.TSharedMessagesResponse>,\n): QueryObserverResult<t.TSharedMessagesResponse> => {\n  return useQuery<t.TSharedMessagesResponse>(\n    [QueryKeys.sharedMessages, shareId],\n    () => dataService.getSharedMessages(shareId),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetSharedLinkQuery = (\n  conversationId: string,\n  config?: UseQueryOptions<t.TSharedLinkGetResponse>,\n): QueryObserverResult<t.TSharedLinkGetResponse> => {\n  const queryClient = useQueryClient();\n  return useQuery<t.TSharedLinkGetResponse>(\n    [QueryKeys.sharedLinks, conversationId],\n    () => dataService.getSharedLink(conversationId),\n    {\n      enabled:\n        !!conversationId &&\n        conversationId !== Constants.NEW_CONVO &&\n        conversationId !== Constants.PENDING_CONVO,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      onSuccess: (data) => {\n        queryClient.setQueryData([QueryKeys.sharedLinks, conversationId], {\n          conversationId: data.conversationId,\n          shareId: data.shareId,\n        });\n      },\n      ...config,\n    },\n  );\n};\n\nexport const useGetConversationByIdQuery = (\n  id: string,\n  config?: UseQueryOptions<s.TConversation>,\n): QueryObserverResult<s.TConversation> => {\n  return useQuery<s.TConversation>(\n    [QueryKeys.conversation, id],\n    () => dataService.getConversationById(id),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\n//This isn't ideal because its just a query and we're using mutation, but it was the only way\n//to make it work with how the Chat component is structured\nexport const useGetConversationByIdMutation = (id: string): UseMutationResult<s.TConversation> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.getConversationById(id), {\n    // onSuccess: (res: s.TConversation) => {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.conversation, id]);\n    },\n  });\n};\n\nexport const useUpdateMessageMutation = (\n  id: string,\n): UseMutationResult<unknown, unknown, t.TUpdateMessageRequest, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateMessageRequest) => dataService.updateMessage(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.messages, id]);\n    },\n  });\n};\n\nexport const useUpdateMessageContentMutation = (\n  conversationId: string,\n): UseMutationResult<unknown, unknown, t.TUpdateMessageContent, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    (payload: t.TUpdateMessageContent) => dataService.updateMessageContent(payload),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries([QueryKeys.messages, conversationId]);\n      },\n    },\n  );\n};\n\nexport const useUpdateUserKeysMutation = (): UseMutationResult<\n  t.TUser,\n  unknown,\n  t.TUpdateUserKeyRequest,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateUserKeyRequest) => dataService.updateUserKey(payload), {\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries([QueryKeys.name, variables.name]);\n    },\n  });\n};\n\nexport const useClearConversationsMutation = (): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.clearAllConversations(), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.allConversations]);\n    },\n  });\n};\n\nexport const useRevokeUserKeyMutation = (name: string): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.revokeUserKey(name), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name, name]);\n      if (s.isAssistantsEndpoint(name)) {\n        queryClient.invalidateQueries([QueryKeys.assistants, name, defaultOrderQuery]);\n        queryClient.invalidateQueries([QueryKeys.assistantDocs]);\n        queryClient.invalidateQueries([QueryKeys.assistants]);\n        queryClient.invalidateQueries([QueryKeys.assistant]);\n        queryClient.invalidateQueries([QueryKeys.actions]);\n        queryClient.invalidateQueries([QueryKeys.tools]);\n      }\n    },\n  });\n};\n\nexport const useRevokeAllUserKeysMutation = (): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.revokeAllUserKeys(), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name]);\n      queryClient.invalidateQueries([\n        QueryKeys.assistants,\n        s.EModelEndpoint.assistants,\n        defaultOrderQuery,\n      ]);\n      queryClient.invalidateQueries([\n        QueryKeys.assistants,\n        s.EModelEndpoint.azureAssistants,\n        defaultOrderQuery,\n      ]);\n      queryClient.invalidateQueries([QueryKeys.assistantDocs]);\n      queryClient.invalidateQueries([QueryKeys.assistants]);\n      queryClient.invalidateQueries([QueryKeys.assistant]);\n      queryClient.invalidateQueries([QueryKeys.actions]);\n      queryClient.invalidateQueries([QueryKeys.tools]);\n    },\n  });\n};\n\nexport const useGetModelsQuery = (\n  config?: UseQueryOptions<t.TModelsConfig>,\n): QueryObserverResult<t.TModelsConfig> => {\n  return useQuery<t.TModelsConfig>([QueryKeys.models], () => dataService.getModels(), {\n    initialData: initialModelsConfig,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    staleTime: Infinity,\n    ...config,\n  });\n};\n\nexport const useCreatePresetMutation = (): UseMutationResult<\n  s.TPreset,\n  unknown,\n  s.TPreset,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: s.TPreset) => dataService.createPreset(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.presets]);\n    },\n  });\n};\n\nexport const useDeletePresetMutation = (): UseMutationResult<\n  m.PresetDeleteResponse,\n  unknown,\n  s.TPreset | undefined,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: s.TPreset | undefined) => dataService.deletePreset(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.presets]);\n    },\n  });\n};\n\nexport const useUpdateTokenCountMutation = (): UseMutationResult<\n  t.TUpdateTokenCountResponse,\n  unknown,\n  { text: string },\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(({ text }: { text: string }) => dataService.updateTokenCount(text), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.tokenCount]);\n    },\n  });\n};\n\nexport const useRegisterUserMutation = (\n  options?: m.RegistrationOptions,\n): UseMutationResult<t.TError, unknown, t.TRegisterUser, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation<t.TRegisterUserResponse, t.TError, t.TRegisterUser>(\n    (payload: t.TRegisterUser) => dataService.register(payload),\n    {\n      ...options,\n      onSuccess: (...args) => {\n        queryClient.invalidateQueries([QueryKeys.user]);\n        if (options?.onSuccess) {\n          options.onSuccess(...args);\n        }\n      },\n    },\n  );\n};\n\nexport const useUserKeyQuery = (\n  name: string,\n  config?: UseQueryOptions<t.TCheckUserKeyResponse>,\n): QueryObserverResult<t.TCheckUserKeyResponse> => {\n  return useQuery<t.TCheckUserKeyResponse>(\n    [QueryKeys.name, name],\n    () => {\n      if (!name) {\n        return Promise.resolve({ expiresAt: '' });\n      }\n      return dataService.userKeyQuery(name);\n    },\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: false,\n      ...config,\n    },\n  );\n};\n\nexport const useRequestPasswordResetMutation = (): UseMutationResult<\n  t.TRequestPasswordResetResponse,\n  unknown,\n  t.TRequestPasswordReset,\n  unknown\n> => {\n  return useMutation((payload: t.TRequestPasswordReset) =>\n    dataService.requestPasswordReset(payload),\n  );\n};\n\nexport const useResetPasswordMutation = (): UseMutationResult<\n  unknown,\n  unknown,\n  t.TResetPassword,\n  unknown\n> => {\n  return useMutation((payload: t.TResetPassword) => dataService.resetPassword(payload));\n};\n\nexport const useAvailablePluginsQuery = <TData = s.TPlugin[]>(\n  config?: UseQueryOptions<s.TPlugin[], unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<s.TPlugin[], unknown, TData>(\n    [QueryKeys.availablePlugins],\n    () => dataService.getAvailablePlugins(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useUpdateUserPluginsMutation = (\n  _options?: m.UpdatePluginAuthOptions,\n): UseMutationResult<t.TUser, unknown, t.TUpdateUserPlugins, unknown> => {\n  const queryClient = useQueryClient();\n  const { onSuccess, ...options } = _options ?? {};\n  return useMutation((payload: t.TUpdateUserPlugins) => dataService.updateUserPlugins(payload), {\n    ...options,\n    onSuccess: (...args) => {\n      queryClient.invalidateQueries([QueryKeys.user]);\n      onSuccess?.(...args);\n    },\n  });\n};\n\nexport const useGetCustomConfigSpeechQuery = (\n  config?: UseQueryOptions<t.TCustomConfigSpeechResponse>,\n): QueryObserverResult<t.TCustomConfigSpeechResponse> => {\n  return useQuery<t.TCustomConfigSpeechResponse>(\n    [QueryKeys.customConfigSpeech],\n    () => dataService.getCustomConfigSpeech(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useUpdateFeedbackMutation = (\n  conversationId: string,\n  messageId: string,\n): UseMutationResult<t.TUpdateFeedbackResponse, Error, t.TUpdateFeedbackRequest> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    (payload: t.TUpdateFeedbackRequest) =>\n      dataService.updateFeedback(conversationId, messageId, payload),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries([QueryKeys.messages, messageId]);\n      },\n    },\n  );\n};\n"],"names":["Tools","EToolResources","AnnotationTypes","StepStatus","MessageContentTypes","RunStatus","FilePurpose","AssistantStreamEvents","defaultOrderQuery","order","limit","AuthType","feedbackTagKeySchema","z","enum","feedbackRatingSchema","feedbackSchema","object","rating","tag","text","string","max","optional","uuid","EModelEndpoint","BedrockProviders","authTypeSchema","nativeEnum","Set","agents","openAI","bedrock","azureOpenAI","anthropic","custom","google","ImageDetail","ReasoningEffort","_a","low","auto","high","eImageDetailSchema","eReasoningEffortSchema","_b","agent","id","name","description","instructions","model","model_parameters","tools","provider","projectIds","artifacts","isCollaborative","recursion_limit","undefined","execute_code","file_search","web_search","type","function","parameters","properties","required","EAgent","openAISettings","default","temperature","min","step","top_p","presence_penalty","frequency_penalty","resendFiles","maxContextTokens","max_tokens","imageDetail","LEGACY_ANTHROPIC_MAX_OUTPUT","anthropicSettings","promptCache","thinking","thinkingBudget","maxOutputTokens","reset","modelName","test","set","value","topP","topK","legacy","agentsSettings","_d","eModelEndpointSchema","extendedModelEndpointSchema","union","tPluginAuthConfigSchema","authField","label","tPluginSchema","pluginKey","icon","authConfig","array","authenticated","boolean","chatMenu","isButton","toolkit","tExampleSchema","input","content","output","agentOptionSettings","functions","classic","tAgentOptionsSchema","skipCompletion","number","messageId","endpoint","clientId","nullable","conversationId","parentMessageId","responseMessageId","overrideParentMessageId","bg","title","or","literal","sender","generation","isCreatedByUser","error","clientTimestamp","createdAt","Date","toISOString","updatedAt","current","unfinished","searchResult","finish_reason","thread_id","iconURL","feedback","coerceNumber","transform","val","trim","parseFloat","DocumentType","lazy","null","record","tConversationSchema","endpointType","isArchived","user","messages","modelLabel","userLabel","promptPrefix","system","context","examples","tags","file_ids","reasoning_effort","assistant_id","agent_id","region","maxTokens","additionalModelRequestFields","additional_instructions","append_current_datetime","presetOverride","unknown","stop","greeting","spec","expiredAt","resendImages","agentOptions","chatGptLabel","tPresetSchema","omit","merge","presetId","defaultPreset","pick","shareId","isPublic","_id","count","position","googleBaseSchema","obj","removeNullishValues","catch","presencePenalty","frequencyPenalty","stopSequences","thinkingConfig","includeThoughts","strip","gptPluginsBaseSchema","removeEmptyStrings","newObj","__assign","Object","keys","forEach","key","result","_c","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","length","bannerId","message","displayFrom","displayTo","tModelSpecSchema","preset","showIconInMenu","showIconInHeader","authType","specsConfigSchema","enforce","prioritize","list","addedEndpoints","assistants","azureAssistants","excelFileTypes","__spreadArray","supportedMimeTypes","defaultSizeLimit","assistantsFileConfig","fileLimit","fileSizeLimit","totalSizeLimit","disabled","FileSources","FileContext","AuthTypeEnum","AuthorizationTypeEnum","TokenExchangeMethodEnum","supportedMimeTypesSchema","any","refine","mimeTypes","every","mimeType","RegExp","endpointFileConfigSchema","fileConfigSchema","endpoints","serverFileSizeLimit","avatarSizeLimit","imageGeneration","percentage","px","clientImageResize","enabled","maxWidth","maxHeight","quality","envVarRegex","extractEnvVariable","trimmed","singleMatch","match","varName","process","env","regex","matches","exec","push","fullMatch","index","i","envValue","substring","SettingsViews","BaseOptionsSchema","iconPath","timeout","initTimeout","serverInstructions","oauth","authorization_url","url","token_url","client_id","client_secret","scope","redirect_uri","token_exchange_method","customUserVars","StdioOptionsSchema","extend","command","args","processedEnv","_i","entries","stderr","WebSocketOptionsSchema","pipe","protocol","URL","SSEOptionsSchema","headers","StreamableHTTPOptionsSchema","MCPOptionsSchema","MCPServersSchema","Capabilities","AgentCapabilities","fileSourceSchema","modelConfigSchema","deploymentName","version","azureBaseSchema","apiKey","serverless","instanceName","addParams","dropParams","forcePrompt","baseURL","additionalHeaders","azureGroupSchema","group","models","and","azureGroupConfigsSchema","baseEndpointSchema","streamRate","titlePrompt","titleModel","availableRegions","RateLimitPrefix","assistantEndpointSchema","disableBuilder","pollIntervalMs","timeoutMs","supportedIds","excludedIds","privateAssistants","retrievalModels","capabilities","code_interpreter","image_vision","retrieval","actions","fetch","userIdQuery","titleConvo","titleMethod","defaultAgentCapabilities","chain","ocr","agentsEndpointSchema","recursionLimit","maxRecursionLimit","allowedProviders","endpointSchema","safeParse","success","concat","values","join","summarize","summaryModel","modelDisplayLabel","customParams","defaultParamsEndpoint","paramDefinitions","strict","customOrder","directEndpoint","titleMessageRole","azureEndpointSchema","groups","plugins","partial","ttsOpenaiSchema","voices","ttsAzureOpenAISchema","apiVersion","ttsElevenLabsSchema","websocketUrl","voice_settings","similarity_boost","stability","style","use_speaker_boost","pronunciation_dictionary_locators","ttsLocalaiSchema","backend","ttsSchema","openai","elevenlabs","localai","sttOpenaiSchema","sttAzureOpenAISchema","sttSchema","speechTab","conversationMode","advancedMode","speechToText","engineSTT","languageSTT","autoTranscribeAudio","decibelValue","autoSendText","textToSpeech","engineTTS","voice","languageTTS","automaticPlayback","playbackRate","cacheTTS","EImageOutputType","rateLimitSchema","fileUploads","ipMax","ipWindowInMinutes","userMax","userWindowInMinutes","conversationsImport","tts","stt","OCRStrategy","SearchCategories","SearchProviders","ScraperTypes","RerankerTypes","SafeSearchTypes","termsOfServiceSchema","externalUrl","openNewTab","modalAcceptance","modalTitle","modalContent","mcpServersSchema","placeholder","intefaceSchema","privacyPolicy","termsOfService","customWelcome","mcpServers","endpointsMenu","modelSelect","sidePanel","multiConvo","bookmarks","memories","presets","prompts","temporaryChat","temporaryChatRetention","runCode","webSearch","turnstileOptionsSchema","language","size","turnstileSchema","siteKey","options","KnownEndpoints","FetchTokenConfig","webSearchSchema","serperApiKey","firecrawlApiKey","firecrawlApiUrl","jinaApiKey","cohereApiKey","searchProvider","scraperType","rerankerType","scraperTimeout","safeSearch","MODERATE","ocrSchema","mistralModel","strategy","MISTRAL_OCR","balanceSchema","startBalance","autoRefillEnabled","refillIntervalValue","refillIntervalUnit","refillAmount","memorySchema","validKeys","tokenLimit","personalize","messageWindowSize","cache","memory","secureImageLinks","imageOutputType","PNG","includedTools","filteredTools","interface","turnstile","fileStrategy","local","allowedDomains","registration","socialLogins","balance","speech","rateLimits","fileConfig","modelSpecs","all","gptPlugins","data","chatGPTBrowser","ollama","deepseek","xai","VisionModes","InfiniteCollections","Time","CacheKeys","ViolationTypes","ErrorTypes","AuthKeys","ImageDetailCost","SettingsTabValues","STTProviders","TTSProviders","Constants","LocalStorageKeys","ForkOptions","CohereConstants","SystemCategories","sharedOpenAIModels","defaultModels","openAIModels","initialModelsConfig","initial","filter","str","params","rest","__rest","query","Array","isArray","map","v","encodeURIComponent","String","buildQuery","shareRoot","keysEndpoint","conversationsRoot","_post","axios","post","JSON","stringify","sent","isRefreshing","failedQueue","refreshToken","retry","endpoints.refreshToken","dispatchTokenUpdatedEvent","token","defaults","common","setTokenHeader","window","dispatchEvent","CustomEvent","detail","processQueue","prom","reject","resolve","interceptors","response","use","__awaiter","originalRequest","config","Promise","includes","status","_retry","console","warn","err_1","location","href","log","err_2","request","get","getResponse","postMultiPart","formData","postTTS","responseType","put","delete","deleteWithOptions","patch","revokeUserKey","endpoints.revokeUserKey","revokeAllUserKeys","getSharedMessages","endpoints.shareMessages","getSharedLink","endpoints.getSharedLink","updateUserKey","payload","Error","QueryKeys","MutationKeys","userKeyQuery","endpoints.userKeyQuery","clearAllConversations","getConversationById","endpoints.conversationById","useGetSharedMessages","useQuery","sharedMessages","dataService.getSharedMessages","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","useGetSharedLinkQuery","queryClient","useQueryClient","sharedLinks","dataService.getSharedLink","NEW_CONVO","PENDING_CONVO","onSuccess","setQueryData","useGetConversationByIdQuery","conversation","dataService.getConversationById","useGetConversationByIdMutation","useMutation","invalidateQueries","useUpdateMessageMutation","endpoints.messages","dataService.updateMessage","useUpdateMessageContentMutation","dataService.updateMessageContent","useUpdateUserKeysMutation","dataService.updateUserKey","variables","useClearConversationsMutation","dataService.clearAllConversations","allConversations","useRevokeUserKeyMutation","dataService.revokeUserKey","_endpoint","toLowerCase","endsWith","assistantDocs","assistant","useRevokeAllUserKeysMutation","dataService.revokeAllUserKeys","s.EModelEndpoint","useGetModelsQuery","initialData","staleTime","Infinity","useCreatePresetMutation","dataService.createPreset","useDeletePresetMutation","arg","useUpdateTokenCountMutation","dataService.updateTokenCount","tokenCount","useRegisterUserMutation","dataService.register","arguments","apply","useUserKeyQuery","dataService.userKeyQuery","expiresAt","useRequestPasswordResetMutation","dataService.requestPasswordReset","useResetPasswordMutation","dataService.resetPassword","useAvailablePluginsQuery","availablePlugins","useUpdateUserPluginsMutation","_options","dataService.updateUserPlugins","useGetCustomConfigSpeechQuery","customConfigSpeech","useUpdateFeedbackMutation","endpoints.feedback","dataService.updateFeedback"],"mappings":"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"}